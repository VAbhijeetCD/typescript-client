const BASE_PATH = "https://api-memberships.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * Membership Service
 * Membership Service 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface GetMembershipSettings200Response
 */
export interface GetMembershipSettings200Response {
    /**
     * 
     * @type {MembershipSettings}
     * @memberof GetMembershipSettings200Response
     */
    'membershipSettings'?: MembershipSettings;
}
/**
 * 
 * @export
 * @interface GetMemberships200Response
 */
export interface GetMemberships200Response {
    /**
     * 
     * @type {Array<Membership>}
     * @memberof GetMemberships200Response
     */
    'memberships'?: Array<Membership>;
    /**
     * 
     * @type {string}
     * @memberof GetMemberships200Response
     */
    'cursor'?: string;
}
/**
 * 
 * @export
 * @interface Membership
 */
export interface Membership {
    /**
     * The id of the membership
     * @type {string}
     * @memberof Membership
     */
    'id'?: string;
    /**
     * The userId of the membership
     * @type {string}
     * @memberof Membership
     */
    'contactId'?: string;
    /**
     * The teamId of the membership
     * @type {string}
     * @memberof Membership
     */
    'teamId'?: string;
    /**
     * The number of points the membership has
     * @type {number}
     * @memberof Membership
     */
    'points'?: number;
    /**
     * The date and time the membership was created
     * @type {string}
     * @memberof Membership
     */
    'createdAt'?: string;
    /**
     * The date and time the membership was last updated
     * @type {string}
     * @memberof Membership
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface MembershipCreate
 */
export interface MembershipCreate {
    /**
     * The userId of the membership
     * @type {string}
     * @memberof MembershipCreate
     */
    'contactId'?: string;
}
/**
 * 
 * @export
 * @interface MembershipSettings
 */
export interface MembershipSettings {
    /**
     * The teamId of the membership
     * @type {string}
     * @memberof MembershipSettings
     */
    'teamId'?: string;
    /**
     * Whether the membership is enabled
     * @type {boolean}
     * @memberof MembershipSettings
     */
    'enabled'?: boolean;
    /**
     * The keywordId to add points
     * @type {string}
     * @memberof MembershipSettings
     */
    'addPointsKeywordId'?: string;
    /**
     * The keywordId to remove points
     * @type {string}
     * @memberof MembershipSettings
     */
    'removePointsKeywordId'?: string;
}
/**
 * 
 * @export
 * @interface MembershipSettingsPatch
 */
export interface MembershipSettingsPatch {
    /**
     * Whether the membership is enabled
     * @type {boolean}
     * @memberof MembershipSettingsPatch
     */
    'enabled'?: boolean;
    /**
     * The keywordId to add points
     * @type {string}
     * @memberof MembershipSettingsPatch
     */
    'addPointsKeywordId'?: string;
    /**
     * The keywordId to remove points
     * @type {string}
     * @memberof MembershipSettingsPatch
     */
    'removePointsKeywordId'?: string;
}
/**
 * 
 * @export
 * @interface PendingMembershipAction
 */
export interface PendingMembershipAction {
    /**
     * The id of the pending membership action
     * @type {string}
     * @memberof PendingMembershipAction
     */
    'id'?: string;
    /**
     * The userId of the pending membership action
     * @type {string}
     * @memberof PendingMembershipAction
     */
    'contactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingMembershipAction
     */
    'action'?: PendingMembershipActionActionEnum;
    /**
     * The number of points to add or remove
     * @type {number}
     * @memberof PendingMembershipAction
     */
    'amount'?: number;
    /**
     * The date and time the pending membership action was created
     * @type {string}
     * @memberof PendingMembershipAction
     */
    'timestamp'?: string;
}

export const PendingMembershipActionActionEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;

export type PendingMembershipActionActionEnum = typeof PendingMembershipActionActionEnum[keyof typeof PendingMembershipActionActionEnum];


/**
 * MembershipSettingsApi - axios parameter creator
 * @export
 */
export const MembershipSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get membership settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/membership-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a membership settings
         * @param {MembershipSettingsPatch} membershipSettingsPatch The membership settings to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipSettings: async (membershipSettingsPatch: MembershipSettingsPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'membershipSettingsPatch' is not null or undefined
            assertParamExists('updateMembershipSettings', 'membershipSettingsPatch', membershipSettingsPatch)
            const localVarPath = `/membership-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipSettingsPatch, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipSettingsApi - functional programming interface
 * @export
 */
export const MembershipSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get membership settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembershipSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMembershipSettings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembershipSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a membership settings
         * @param {MembershipSettingsPatch} membershipSettingsPatch The membership settings to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMembershipSettings(membershipSettingsPatch: MembershipSettingsPatch, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMembershipSettings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMembershipSettings(membershipSettingsPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipSettingsApi - factory interface
 * @export
 */
export const MembershipSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get membership settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembershipSettings(options?: any): AxiosPromise<GetMembershipSettings200Response> {
            return localVarFp.getMembershipSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a membership settings
         * @param {MembershipSettingsPatch} membershipSettingsPatch The membership settings to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMembershipSettings(membershipSettingsPatch: MembershipSettingsPatch, options?: any): AxiosPromise<GetMembershipSettings200Response> {
            return localVarFp.updateMembershipSettings(membershipSettingsPatch, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateMembershipSettings operation in MembershipSettingsApi.
 * @export
 * @interface MembershipSettingsApiUpdateMembershipSettingsRequest
 */
export interface MembershipSettingsApiUpdateMembershipSettingsRequest {
    /**
     * The membership settings to update
     * @type {MembershipSettingsPatch}
     * @memberof MembershipSettingsApiUpdateMembershipSettings
     */
    readonly membershipSettingsPatch: MembershipSettingsPatch
}

/**
 * MembershipSettingsApi - object-oriented interface
 * @export
 * @class MembershipSettingsApi
 * @extends {BaseAPI}
 */
export class MembershipSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get membership settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipSettingsApi
     */
    public getMembershipSettings(options?: AxiosRequestConfig) {
        return MembershipSettingsApiFp(this.configuration).getMembershipSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a membership settings
     * @param {MembershipSettingsApiUpdateMembershipSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipSettingsApi
     */
    public updateMembershipSettings(requestParameters: MembershipSettingsApiUpdateMembershipSettingsRequest, options?: AxiosRequestConfig) {
        return MembershipSettingsApiFp(this.configuration).updateMembershipSettings(requestParameters.membershipSettingsPatch, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MembershipsApi - axios parameter creator
 * @export
 */
export const MembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a membership
         * @param {MembershipCreate} membershipCreate The membership to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembership: async (membershipCreate: MembershipCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'membershipCreate' is not null or undefined
            assertParamExists('createMembership', 'membershipCreate', membershipCreate)
            const localVarPath = `/memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(membershipCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a membership
         * @param {string} contactId The contactId of the membership to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembership: async (contactId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('getMembership', 'contactId', contactId)
            const localVarPath = `/memberships/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get memberships
         * @param {number} [count] The number of memberships to get
         * @param {string} [cursor] The cursor to get memberships from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberships: async (count?: number, cursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembershipsApi - functional programming interface
 * @export
 */
export const MembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a membership
         * @param {MembershipCreate} membershipCreate The membership to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMembership(membershipCreate: MembershipCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMembership(membershipCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a membership
         * @param {string} contactId The contactId of the membership to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembership(contactId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Membership>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembership(contactId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get memberships
         * @param {number} [count] The number of memberships to get
         * @param {string} [cursor] The cursor to get memberships from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberships(count?: number, cursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMemberships200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberships(count, cursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MembershipsApi - factory interface
 * @export
 */
export const MembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembershipsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a membership
         * @param {MembershipCreate} membershipCreate The membership to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMembership(membershipCreate: MembershipCreate, options?: any): AxiosPromise<Membership> {
            return localVarFp.createMembership(membershipCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a membership
         * @param {string} contactId The contactId of the membership to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembership(contactId: string, options?: any): AxiosPromise<Membership> {
            return localVarFp.getMembership(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get memberships
         * @param {number} [count] The number of memberships to get
         * @param {string} [cursor] The cursor to get memberships from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberships(count?: number, cursor?: string, options?: any): AxiosPromise<GetMemberships200Response> {
            return localVarFp.getMemberships(count, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMembership operation in MembershipsApi.
 * @export
 * @interface MembershipsApiCreateMembershipRequest
 */
export interface MembershipsApiCreateMembershipRequest {
    /**
     * The membership to create
     * @type {MembershipCreate}
     * @memberof MembershipsApiCreateMembership
     */
    readonly membershipCreate: MembershipCreate
}

/**
 * Request parameters for getMembership operation in MembershipsApi.
 * @export
 * @interface MembershipsApiGetMembershipRequest
 */
export interface MembershipsApiGetMembershipRequest {
    /**
     * The contactId of the membership to get
     * @type {string}
     * @memberof MembershipsApiGetMembership
     */
    readonly contactId: string
}

/**
 * Request parameters for getMemberships operation in MembershipsApi.
 * @export
 * @interface MembershipsApiGetMembershipsRequest
 */
export interface MembershipsApiGetMembershipsRequest {
    /**
     * The number of memberships to get
     * @type {number}
     * @memberof MembershipsApiGetMemberships
     */
    readonly count?: number

    /**
     * The cursor to get memberships from
     * @type {string}
     * @memberof MembershipsApiGetMemberships
     */
    readonly cursor?: string
}

/**
 * MembershipsApi - object-oriented interface
 * @export
 * @class MembershipsApi
 * @extends {BaseAPI}
 */
export class MembershipsApi extends BaseAPI {
    /**
     * 
     * @summary Create a membership
     * @param {MembershipsApiCreateMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApi
     */
    public createMembership(requestParameters: MembershipsApiCreateMembershipRequest, options?: AxiosRequestConfig) {
        return MembershipsApiFp(this.configuration).createMembership(requestParameters.membershipCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a membership
     * @param {MembershipsApiGetMembershipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApi
     */
    public getMembership(requestParameters: MembershipsApiGetMembershipRequest, options?: AxiosRequestConfig) {
        return MembershipsApiFp(this.configuration).getMembership(requestParameters.contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get memberships
     * @param {MembershipsApiGetMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembershipsApi
     */
    public getMemberships(requestParameters: MembershipsApiGetMembershipsRequest = {}, options?: AxiosRequestConfig) {
        return MembershipsApiFp(this.configuration).getMemberships(requestParameters.count, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}


