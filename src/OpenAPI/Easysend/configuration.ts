/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Easysend (Notifications) Service
 * Data Processing service to standardize & process data from individual parsers & services. ## Writing a service for ChatDaddy Easysend The job of a service is to parse and clean data from a given data source. If you are writing a parser for an e-commerce website -- your job is to simply extract the required parameters and send them to the EasySend service in the required format (more on the format later).  ## Incorporating the routes Easysend requires just the base url for each service. This can be  - http://abcd.com/api - http://xyz.com/ - etc. Appending to this base url, each service must incorporate the following routes in their app --  ### GET /easysend/schema \'This route is used by easysend to determine all the specifications of the service including:\'\' - the parameters the service can send - credentials required - an image - a description & name View the `ServiceModel` schema to know the exact specifications ### POST /easysend/{id} - This route is for registering a new tracking for a user.  - The `id` parameter is the ID of this tracking. - Service should keep the `id` parameter secret. - Body will be `application/json` encoded and have the following type: ``` ts     type Body = {         // the credentials the service required, specified by the aforementioned schema         credentials: { [_: string]: string }      } ``` - Service must check credentials & return a 400+ code if invalid - If the service returns a 200 code, it will be assumed that the tracking has been saved & validated successfully ### DELETE /easysend/{id} - This route is for deregistering the tracking specified by the `id` parameter in the path. ## Sending Events to Easysend - Easysend expects a JSON encoded body at `PATCH /event/{id}` where ID is the secret identifier of the tracking registered previously - This route is covered in this document along with the required schema [here](/#Events) 
 *
 * The version of the OpenAPI document: 2.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
}
