const BASE_PATH = "https://api-chatmary.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * Chatdaddy ChatMary Service
 * Manage natural language to action automation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AutocompleteCalendarEventRequest
 */
export interface AutocompleteCalendarEventRequest {
    /**
     * message to extract calendar event data from
     * @type {string}
     * @memberof AutocompleteCalendarEventRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface BotAddPost200Response
 */
export interface BotAddPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof BotAddPost200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface BotAddPostRequest
 */
export interface BotAddPostRequest {
    /**
     * Name of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'botId': string;
    /**
     * Description of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'botToken': string;
    /**
     * Description of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface BotMessagePost200Response
 */
export interface BotMessagePost200Response {
    /**
     * 
     * @type {string}
     * @memberof BotMessagePost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface BotMessagePostRequest
 */
export interface BotMessagePostRequest {
    /**
     * Message to send to the bot
     * @type {string}
     * @memberof BotMessagePostRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface BotsGet200Response
 */
export interface BotsGet200Response {
    /**
     * 
     * @type {Array<CustomBot>}
     * @memberof BotsGet200Response
     */
    'bots'?: Array<CustomBot>;
}
/**
 * 
 * @export
 * @interface CalendarEvent
 */
export interface CalendarEvent {
    /**
     * Title of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'eventName': string;
    /**
     * Time of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'time': string;
    /**
     * Date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'date': string;
    /**
     * duration of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'duration': string;
}
/**
 * 
 * @export
 * @interface ContactToken
 */
export interface ContactToken {
    /**
     * ID of the contact
     * @type {string}
     * @memberof ContactToken
     */
    'contactId': string;
    /**
     * Access token for the contact
     * @type {string}
     * @memberof ContactToken
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface ConversationIdGetRequest
 */
export interface ConversationIdGetRequest {
    /**
     * ID of the bot
     * @type {string}
     * @memberof ConversationIdGetRequest
     */
    'botId': string;
    /**
     * ID of the chat
     * @type {string}
     * @memberof ConversationIdGetRequest
     */
    'chatId': string;
}
/**
 * 
 * @export
 * @interface ConversationIdPostRequest
 */
export interface ConversationIdPostRequest {
    /**
     * ID of the bot
     * @type {string}
     * @memberof ConversationIdPostRequest
     */
    'botId': string;
    /**
     * ID of the chat
     * @type {string}
     * @memberof ConversationIdPostRequest
     */
    'chatId': string;
    /**
     * ID of the conversation
     * @type {string}
     * @memberof ConversationIdPostRequest
     */
    'conversationId': string;
    /**
     * Name of the app being Used
     * @type {string}
     * @memberof ConversationIdPostRequest
     */
    'appName'?: string;
}
/**
 * 
 * @export
 * @interface ConversationRecord
 */
export interface ConversationRecord {
    /**
     * ID of the bot
     * @type {string}
     * @memberof ConversationRecord
     */
    'botId': string;
    /**
     * ID of the chat
     * @type {string}
     * @memberof ConversationRecord
     */
    'chatId': string;
    /**
     * ID of the conversation
     * @type {string}
     * @memberof ConversationRecord
     */
    'conversationId'?: string;
    /**
     * Name of the app being Used
     * @type {string}
     * @memberof ConversationRecord
     */
    'appName'?: string;
}
/**
 * 
 * @export
 * @interface CustomBot
 */
export interface CustomBot {
    /**
     * Account ID
     * @type {string}
     * @memberof CustomBot
     */
    'accountId': string;
    /**
     * Bot id as generated by ai bot provider
     * @type {string}
     * @memberof CustomBot
     */
    'botId': string;
    /**
     * Access token for the bot
     * @type {string}
     * @memberof CustomBot
     */
    'botToken': string;
    /**
     * User Id as provided by the bot provider
     * @type {string}
     * @memberof CustomBot
     */
    'userId': string;
    /**
     * TeamId the bot belongs to
     * @type {string}
     * @memberof CustomBot
     */
    'teamId'?: string;
}
/**
 * 
 * @export
 * @interface OauthCallback200Response
 */
export interface OauthCallback200Response {
    /**
     * 
     * @type {string}
     * @memberof OauthCallback200Response
     */
    'accessToken'?: string;
}

/**
 * CustomBotApi - axios parameter creator
 * @export
 */
export const CustomBotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {string} accountId 
         * @param {BotAddPostRequest} [botAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botAddPost: async (accountId: string, botAddPostRequest?: BotAddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('botAddPost', 'accountId', accountId)
            const localVarPath = `/bot/add/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botAddPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete all custom bots
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botDelete: async (botId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botDelete', 'botId', botId)
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (botId !== undefined) {
                localVarQueryParameter['botId'] = botId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send a message to a custom bot
         * @param {string} botId 
         * @param {BotMessagePostRequest} [botMessagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botMessagePost: async (botId: string, botMessagePostRequest?: BotMessagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('botMessagePost', 'botId', botId)
            const localVarPath = `/bots/{botId}/message`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botMessagePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all custom bots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get conversation ID
         * @param {ConversationIdGetRequest} [conversationIdGetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conversationIdGet: async (conversationIdGetRequest?: ConversationIdGetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversationId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversationIdGetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set conversation ID
         * @param {ConversationIdPostRequest} [conversationIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conversationIdPost: async (conversationIdPostRequest?: ConversationIdPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/conversationId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(conversationIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomBotApi - functional programming interface
 * @export
 */
export const CustomBotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomBotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {string} accountId 
         * @param {BotAddPostRequest} [botAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botAddPost(accountId: string, botAddPostRequest?: BotAddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotAddPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botAddPost(accountId, botAddPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete all custom bots
         * @param {string} botId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botDelete(botId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotAddPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botDelete(botId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send a message to a custom bot
         * @param {string} botId 
         * @param {BotMessagePostRequest} [botMessagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botMessagePost(botId: string, botMessagePostRequest?: BotMessagePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotMessagePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botMessagePost(botId, botMessagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all custom bots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get conversation ID
         * @param {ConversationIdGetRequest} [conversationIdGetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conversationIdGet(conversationIdGetRequest?: ConversationIdGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conversationIdGet(conversationIdGetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set conversation ID
         * @param {ConversationIdPostRequest} [conversationIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conversationIdPost(conversationIdPostRequest?: ConversationIdPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conversationIdPost(conversationIdPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomBotApi - factory interface
 * @export
 */
export const CustomBotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomBotApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {CustomBotApiBotAddPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botAddPost(requestParameters: CustomBotApiBotAddPostRequest, options?: AxiosRequestConfig): AxiosPromise<BotAddPost200Response> {
            return localVarFp.botAddPost(requestParameters.accountId, requestParameters.botAddPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete all custom bots
         * @param {CustomBotApiBotDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botDelete(requestParameters: CustomBotApiBotDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<BotAddPost200Response> {
            return localVarFp.botDelete(requestParameters.botId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send a message to a custom bot
         * @param {CustomBotApiBotMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botMessagePost(requestParameters: CustomBotApiBotMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<BotMessagePost200Response> {
            return localVarFp.botMessagePost(requestParameters.botId, requestParameters.botMessagePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all custom bots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(options?: AxiosRequestConfig): AxiosPromise<BotsGet200Response> {
            return localVarFp.botsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get conversation ID
         * @param {CustomBotApiConversationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conversationIdGet(requestParameters: CustomBotApiConversationIdGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConversationRecord> {
            return localVarFp.conversationIdGet(requestParameters.conversationIdGetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set conversation ID
         * @param {CustomBotApiConversationIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conversationIdPost(requestParameters: CustomBotApiConversationIdPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConversationRecord> {
            return localVarFp.conversationIdPost(requestParameters.conversationIdPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for botAddPost operation in CustomBotApi.
 * @export
 * @interface CustomBotApiBotAddPostRequest
 */
export interface CustomBotApiBotAddPostRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomBotApiBotAddPost
     */
    readonly accountId: string

    /**
     * 
     * @type {BotAddPostRequest}
     * @memberof CustomBotApiBotAddPost
     */
    readonly botAddPostRequest?: BotAddPostRequest
}

/**
 * Request parameters for botDelete operation in CustomBotApi.
 * @export
 * @interface CustomBotApiBotDeleteRequest
 */
export interface CustomBotApiBotDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomBotApiBotDelete
     */
    readonly botId: string
}

/**
 * Request parameters for botMessagePost operation in CustomBotApi.
 * @export
 * @interface CustomBotApiBotMessagePostRequest
 */
export interface CustomBotApiBotMessagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomBotApiBotMessagePost
     */
    readonly botId: string

    /**
     * 
     * @type {BotMessagePostRequest}
     * @memberof CustomBotApiBotMessagePost
     */
    readonly botMessagePostRequest?: BotMessagePostRequest
}

/**
 * Request parameters for conversationIdGet operation in CustomBotApi.
 * @export
 * @interface CustomBotApiConversationIdGetRequest
 */
export interface CustomBotApiConversationIdGetRequest {
    /**
     * 
     * @type {ConversationIdGetRequest}
     * @memberof CustomBotApiConversationIdGet
     */
    readonly conversationIdGetRequest?: ConversationIdGetRequest
}

/**
 * Request parameters for conversationIdPost operation in CustomBotApi.
 * @export
 * @interface CustomBotApiConversationIdPostRequest
 */
export interface CustomBotApiConversationIdPostRequest {
    /**
     * 
     * @type {ConversationIdPostRequest}
     * @memberof CustomBotApiConversationIdPost
     */
    readonly conversationIdPostRequest?: ConversationIdPostRequest
}

/**
 * CustomBotApi - object-oriented interface
 * @export
 * @class CustomBotApi
 * @extends {BaseAPI}
 */
export class CustomBotApi extends BaseAPI {
    /**
     * 
     * @summary Add a custom AI bot
     * @param {CustomBotApiBotAddPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public botAddPost(requestParameters: CustomBotApiBotAddPostRequest, options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).botAddPost(requestParameters.accountId, requestParameters.botAddPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete all custom bots
     * @param {CustomBotApiBotDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public botDelete(requestParameters: CustomBotApiBotDeleteRequest, options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).botDelete(requestParameters.botId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send a message to a custom bot
     * @param {CustomBotApiBotMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public botMessagePost(requestParameters: CustomBotApiBotMessagePostRequest, options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).botMessagePost(requestParameters.botId, requestParameters.botMessagePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all custom bots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public botsGet(options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).botsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get conversation ID
     * @param {CustomBotApiConversationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public conversationIdGet(requestParameters: CustomBotApiConversationIdGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).conversationIdGet(requestParameters.conversationIdGetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set conversation ID
     * @param {CustomBotApiConversationIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomBotApi
     */
    public conversationIdPost(requestParameters: CustomBotApiConversationIdPostRequest = {}, options?: AxiosRequestConfig) {
        return CustomBotApiFp(this.configuration).conversationIdPost(requestParameters.conversationIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent: async (autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/autocomplete/calendar-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(autocompleteCalendarEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback: async (code: string, state: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('oauthCallback', 'code', code)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('oauthCallback', 'state', state)
            const localVarPath = `/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteCalendarEvent(autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteCalendarEvent(autocompleteCalendarEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallback(code: string, state: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthCallback200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(code, state, scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {ScheduleApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent(requestParameters: ScheduleApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CalendarEvent> {
            return localVarFp.autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary OAuth callback
         * @param {ScheduleApiOauthCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback(requestParameters: ScheduleApiOauthCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<OauthCallback200Response> {
            return localVarFp.oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for autocompleteCalendarEvent operation in ScheduleApi.
 * @export
 * @interface ScheduleApiAutocompleteCalendarEventRequest
 */
export interface ScheduleApiAutocompleteCalendarEventRequest {
    /**
     * 
     * @type {AutocompleteCalendarEventRequest}
     * @memberof ScheduleApiAutocompleteCalendarEvent
     */
    readonly autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest
}

/**
 * Request parameters for oauthCallback operation in ScheduleApi.
 * @export
 * @interface ScheduleApiOauthCallbackRequest
 */
export interface ScheduleApiOauthCallbackRequest {
    /**
     * 
     * @type {string}
     * @memberof ScheduleApiOauthCallback
     */
    readonly code: string

    /**
     * 
     * @type {string}
     * @memberof ScheduleApiOauthCallback
     */
    readonly state: string

    /**
     * 
     * @type {string}
     * @memberof ScheduleApiOauthCallback
     */
    readonly scope?: string
}

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @summary Extract calendar event information from message
     * @param {ScheduleApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public autocompleteCalendarEvent(requestParameters: ScheduleApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary OAuth callback
     * @param {ScheduleApiOauthCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public oauthCallback(requestParameters: ScheduleApiOauthCallbackRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }
}


