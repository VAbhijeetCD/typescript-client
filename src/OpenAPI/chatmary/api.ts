const BASE_PATH = "https://api-chatmary.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * Chatdaddy ChatMary Service
 * Manage natural language to action automation
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AutocompleteCalendarEventRequest
 */
export interface AutocompleteCalendarEventRequest {
    /**
     * message to extract calendar event data from
     * @type {string}
     * @memberof AutocompleteCalendarEventRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface BotAddPost200Response
 */
export interface BotAddPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof BotAddPost200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface BotAddPostRequest
 */
export interface BotAddPostRequest {
    /**
     * Name of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'botId': string;
    /**
     * Description of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'botToken': string;
    /**
     * Description of the bot
     * @type {string}
     * @memberof BotAddPostRequest
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface BotsGet200Response
 */
export interface BotsGet200Response {
    /**
     * 
     * @type {Array<CustomBot>}
     * @memberof BotsGet200Response
     */
    'bots'?: Array<CustomBot>;
}
/**
 * 
 * @export
 * @interface CalendarEvent
 */
export interface CalendarEvent {
    /**
     * Title of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'eventName': string;
    /**
     * Time of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'time': string;
    /**
     * Date of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'date': string;
    /**
     * duration of the event
     * @type {string}
     * @memberof CalendarEvent
     */
    'duration': string;
}
/**
 * 
 * @export
 * @interface ContactToken
 */
export interface ContactToken {
    /**
     * ID of the contact
     * @type {string}
     * @memberof ContactToken
     */
    'contactId': string;
    /**
     * Access token for the contact
     * @type {string}
     * @memberof ContactToken
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface CustomBot
 */
export interface CustomBot {
    /**
     * Account ID
     * @type {string}
     * @memberof CustomBot
     */
    'accountId': string;
    /**
     * Bot id as generated by ai bot provider
     * @type {string}
     * @memberof CustomBot
     */
    'botId': string;
    /**
     * Access token for the bot
     * @type {string}
     * @memberof CustomBot
     */
    'botToken': string;
    /**
     * User Id as provided by the bot provider
     * @type {string}
     * @memberof CustomBot
     */
    'userId': string;
    /**
     * TeamId the bot belongs to
     * @type {string}
     * @memberof CustomBot
     */
    'teamId'?: string;
}
/**
 * 
 * @export
 * @interface OauthCallback200Response
 */
export interface OauthCallback200Response {
    /**
     * 
     * @type {string}
     * @memberof OauthCallback200Response
     */
    'accessToken'?: string;
}

/**
 * AutocompleteApi - axios parameter creator
 * @export
 */
export const AutocompleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent: async (autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/autocomplete/calendar-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["AUTOCOMPLETE_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(autocompleteCalendarEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback: async (code: string, state: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('oauthCallback', 'code', code)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('oauthCallback', 'state', state)
            const localVarPath = `/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutocompleteApi - functional programming interface
 * @export
 */
export const AutocompleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutocompleteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteCalendarEventRequest} [autocompleteCalendarEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteCalendarEvent(autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteCalendarEvent(autocompleteCalendarEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary OAuth callback
         * @param {string} code 
         * @param {string} state 
         * @param {string} [scope] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallback(code: string, state: string, scope?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthCallback200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(code, state, scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutocompleteApi - factory interface
 * @export
 */
export const AutocompleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutocompleteApiFp(configuration)
    return {
        /**
         * 
         * @summary Extract calendar event information from message
         * @param {AutocompleteApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteCalendarEvent(requestParameters: AutocompleteApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CalendarEvent> {
            return localVarFp.autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary OAuth callback
         * @param {AutocompleteApiOauthCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback(requestParameters: AutocompleteApiOauthCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<OauthCallback200Response> {
            return localVarFp.oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for autocompleteCalendarEvent operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiAutocompleteCalendarEventRequest
 */
export interface AutocompleteApiAutocompleteCalendarEventRequest {
    /**
     * 
     * @type {AutocompleteCalendarEventRequest}
     * @memberof AutocompleteApiAutocompleteCalendarEvent
     */
    readonly autocompleteCalendarEventRequest?: AutocompleteCalendarEventRequest
}

/**
 * Request parameters for oauthCallback operation in AutocompleteApi.
 * @export
 * @interface AutocompleteApiOauthCallbackRequest
 */
export interface AutocompleteApiOauthCallbackRequest {
    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly code: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly state: string

    /**
     * 
     * @type {string}
     * @memberof AutocompleteApiOauthCallback
     */
    readonly scope?: string
}

/**
 * AutocompleteApi - object-oriented interface
 * @export
 * @class AutocompleteApi
 * @extends {BaseAPI}
 */
export class AutocompleteApi extends BaseAPI {
    /**
     * 
     * @summary Extract calendar event information from message
     * @param {AutocompleteApiAutocompleteCalendarEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public autocompleteCalendarEvent(requestParameters: AutocompleteApiAutocompleteCalendarEventRequest = {}, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).autocompleteCalendarEvent(requestParameters.autocompleteCalendarEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary OAuth callback
     * @param {AutocompleteApiOauthCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public oauthCallback(requestParameters: AutocompleteApiOauthCallbackRequest, options?: AxiosRequestConfig) {
        return AutocompleteApiFp(this.configuration).oauthCallback(requestParameters.code, requestParameters.state, requestParameters.scope, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BotApi - axios parameter creator
 * @export
 */
export const BotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {string} accountId 
         * @param {BotAddPostRequest} [botAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botAddPost: async (accountId: string, botAddPostRequest?: BotAddPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('botAddPost', 'accountId', accountId)
            const localVarPath = `/bot/add/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(botAddPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all bots for an account
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('botsGet', 'accountId', accountId)
            const localVarPath = `/bots/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BotApi - functional programming interface
 * @export
 */
export const BotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {string} accountId 
         * @param {BotAddPostRequest} [botAddPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botAddPost(accountId: string, botAddPostRequest?: BotAddPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotAddPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botAddPost(accountId, botAddPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all bots for an account
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async botsGet(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.botsGet(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BotApi - factory interface
 * @export
 */
export const BotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BotApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a custom AI bot
         * @param {BotApiBotAddPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botAddPost(requestParameters: BotApiBotAddPostRequest, options?: AxiosRequestConfig): AxiosPromise<BotAddPost200Response> {
            return localVarFp.botAddPost(requestParameters.accountId, requestParameters.botAddPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all bots for an account
         * @param {BotApiBotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(requestParameters: BotApiBotsGetRequest, options?: AxiosRequestConfig): AxiosPromise<BotsGet200Response> {
            return localVarFp.botsGet(requestParameters.accountId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for botAddPost operation in BotApi.
 * @export
 * @interface BotApiBotAddPostRequest
 */
export interface BotApiBotAddPostRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotAddPost
     */
    readonly accountId: string

    /**
     * 
     * @type {BotAddPostRequest}
     * @memberof BotApiBotAddPost
     */
    readonly botAddPostRequest?: BotAddPostRequest
}

/**
 * Request parameters for botsGet operation in BotApi.
 * @export
 * @interface BotApiBotsGetRequest
 */
export interface BotApiBotsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof BotApiBotsGet
     */
    readonly accountId: string
}

/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export class BotApi extends BaseAPI {
    /**
     * 
     * @summary Add a custom AI bot
     * @param {BotApiBotAddPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botAddPost(requestParameters: BotApiBotAddPostRequest, options?: AxiosRequestConfig) {
        return BotApiFp(this.configuration).botAddPost(requestParameters.accountId, requestParameters.botAddPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all bots for an account
     * @param {BotApiBotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    public botsGet(requestParameters: BotApiBotsGetRequest, options?: AxiosRequestConfig) {
        return BotApiFp(this.configuration).botsGet(requestParameters.accountId, options).then((request) => request(this.axios, this.basePath));
    }
}


