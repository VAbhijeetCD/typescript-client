const BASE_PATH = "https://api-metrics.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Metrics Service
 * Query aggregate metrics
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @enum {string}
 */

export const Aggregate = {
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;

export type Aggregate = typeof Aggregate[keyof typeof Aggregate];


/**
 * 
 * @export
 * @enum {string}
 */

export const DataAggregateType = {
    Avg: 'avg',
    Sum: 'sum'
} as const;

export type DataAggregateType = typeof DataAggregateType[keyof typeof DataAggregateType];


/**
 * 
 * @export
 * @interface GetHomeMetrics200Response
 */
export interface GetHomeMetrics200Response {
    /**
     * 
     * @type {Array<MetricsResult>}
     * @memberof GetHomeMetrics200Response
     */
    'metrics': Array<MetricsResult>;
}
/**
 * All the metrics you\'d like to see on the home page
 * @export
 * @interface GetMetrics200Response
 */
export interface GetMetrics200Response {
    /**
     * 
     * @type {Array<HomeMetricUpdateRequest>}
     * @memberof GetMetrics200Response
     */
    'metrics': Array<HomeMetricUpdateRequest>;
}
/**
 * 
 * @export
 * @interface GetTopMetricKeys200Response
 */
export interface GetTopMetricKeys200Response {
    /**
     * 
     * @type {Array<TopMetricKey>}
     * @memberof GetTopMetricKeys200Response
     */
    'keys': Array<TopMetricKey>;
}
/**
 * 
 * @export
 * @interface HomeMetricUpdateRequest
 */
export interface HomeMetricUpdateRequest {
    /**
     * 
     * @type {MetricType}
     * @memberof HomeMetricUpdateRequest
     */
    'metric': MetricType;
    /**
     * 
     * @type {DataAggregateType}
     * @memberof HomeMetricUpdateRequest
     */
    'aggregate': DataAggregateType;
}
/**
 * 
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof Metric
     */
    'timestamp': string;
    /**
     * 
     * @type {number}
     * @memberof Metric
     */
    'value': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const MetricType = {
    MessagesSentByUser: 'messages-sent-by-user',
    MessagesRecvByChat: 'messages-recv-by-chat',
    AvgResponseTimeByUser: 'avg-response-time-by-user',
    MessageReplyRateByUser: 'message-reply-rate-by-user',
    TasksAddedByUser: 'tasks-added-by-user',
    TasksSolvedByUser: 'tasks-solved-by-user',
    TasksAddedByChat: 'tasks-added-by-chat',
    ContactsTaggedByTag: 'contacts-tagged-by-tag',
    MessageFlowsSentByFlowId: 'message-flows-sent-by-flow-id',
    MessageFlowClickRateByFlowId: 'message-flow-click-rate-by-flow-id',
    PaymentRecvByPhone: 'payment-recv-by-phone',
    OrdersRecvByPhone: 'orders-recv-by-phone',
    NewChats: 'new-chats'
} as const;

export type MetricType = typeof MetricType[keyof typeof MetricType];


/**
 * 
 * @export
 * @interface MetricsResult
 */
export interface MetricsResult {
    /**
     * 
     * @type {Array<Metric>}
     * @memberof MetricsResult
     */
    'metrics': Array<Metric>;
    /**
     * 
     * @type {Array<Metric>}
     * @memberof MetricsResult
     */
    'previousMetrics'?: Array<Metric>;
    /**
     * 
     * @type {MetricType}
     * @memberof MetricsResult
     */
    'type': MetricType;
}
/**
 * 
 * @export
 * @interface TopMetricKey
 */
export interface TopMetricKey {
    /**
     * 
     * @type {string}
     * @memberof TopMetricKey
     */
    'key': string;
    /**
     * 
     * @type {number}
     * @memberof TopMetricKey
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface UpdateHomeMetricsRequest
 */
export interface UpdateHomeMetricsRequest {
    /**
     * 
     * @type {Array<HomeMetricUpdateRequest>}
     * @memberof UpdateHomeMetricsRequest
     */
    'metrics': Array<HomeMetricUpdateRequest>;
}

/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Will return: - 30 results for the \"day\" aggregate - 12 results for the \"week\" aggregate - 6 results for the \"month\" aggregate 
         * @summary Get all metrics for the home page
         * @param {Aggregate} aggregate Aggregate function to use
         * @param {number} [page] 
         * @param {boolean} [includePreviousPeriod] 
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeMetrics: async (aggregate: Aggregate, page?: number, includePreviousPeriod?: boolean, timezoneOffset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aggregate' is not null or undefined
            assertParamExists('getHomeMetrics', 'aggregate', aggregate)
            const localVarPath = `/metrics/home/{aggregate}`
                .replace(`{${"aggregate"}}`, encodeURIComponent(String(aggregate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["METRICS_GET"], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (includePreviousPeriod !== undefined) {
                localVarQueryParameter['includePreviousPeriod'] = includePreviousPeriod;
            }

            if (timezoneOffset !== undefined) {
                localVarQueryParameter['timezoneOffset'] = timezoneOffset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query a given metric
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {number} [page] 
         * @param {Array<string>} [key] fetch data for only these specific keys
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {DataAggregateType} [dataAggregation] How to aggregate the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics: async (metric: MetricType, aggregate: Aggregate, count?: number, page?: number, key?: Array<string>, timezoneOffset?: string, dataAggregation?: DataAggregateType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('getMetrics', 'metric', metric)
            // verify required parameter 'aggregate' is not null or undefined
            assertParamExists('getMetrics', 'aggregate', aggregate)
            const localVarPath = `/metrics/{metric}/{aggregate}`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric)))
                .replace(`{${"aggregate"}}`, encodeURIComponent(String(aggregate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["METRICS_GET"], configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (key) {
                localVarQueryParameter['key'] = key;
            }

            if (timezoneOffset !== undefined) {
                localVarQueryParameter['timezoneOffset'] = timezoneOffset;
            }

            if (dataAggregation !== undefined) {
                localVarQueryParameter['dataAggregation'] = dataAggregation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Query the top performing keys for a metric & aggregate
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {'sum' | 'avg'} [dataAggregation] How to aggregate the data
         * @param {string} [timestamp] Timestamp to fetch the top keys for
         * @param {'asc' | 'desc'} [orderDirection] Order direction for the top keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopMetricKeys: async (metric: MetricType, aggregate: Aggregate, count?: number, timezoneOffset?: string, dataAggregation?: 'sum' | 'avg', timestamp?: string, orderDirection?: 'asc' | 'desc', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('getTopMetricKeys', 'metric', metric)
            // verify required parameter 'aggregate' is not null or undefined
            assertParamExists('getTopMetricKeys', 'aggregate', aggregate)
            const localVarPath = `/top-metric-keys/{metric}/{aggregate}`
                .replace(`{${"metric"}}`, encodeURIComponent(String(metric)))
                .replace(`{${"aggregate"}}`, encodeURIComponent(String(aggregate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["METRICS_GET"], configuration)

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (timezoneOffset !== undefined) {
                localVarQueryParameter['timezoneOffset'] = timezoneOffset;
            }

            if (dataAggregation !== undefined) {
                localVarQueryParameter['dataAggregation'] = dataAggregation;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = (timestamp as any instanceof Date) ?
                    (timestamp as any).toISOString() :
                    timestamp;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the default metrics seen on the home page
         * @param {UpdateHomeMetricsRequest} [updateHomeMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeMetrics: async (updateHomeMetricsRequest?: UpdateHomeMetricsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/home`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["METRICS_GET"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHomeMetricsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * Will return: - 30 results for the \"day\" aggregate - 12 results for the \"week\" aggregate - 6 results for the \"month\" aggregate 
         * @summary Get all metrics for the home page
         * @param {Aggregate} aggregate Aggregate function to use
         * @param {number} [page] 
         * @param {boolean} [includePreviousPeriod] 
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeMetrics(aggregate: Aggregate, page?: number, includePreviousPeriod?: boolean, timezoneOffset?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHomeMetrics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeMetrics(aggregate, page, includePreviousPeriod, timezoneOffset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query a given metric
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {number} [page] 
         * @param {Array<string>} [key] fetch data for only these specific keys
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {DataAggregateType} [dataAggregation] How to aggregate the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetrics(metric: MetricType, aggregate: Aggregate, count?: number, page?: number, key?: Array<string>, timezoneOffset?: string, dataAggregation?: DataAggregateType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMetrics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetrics(metric, aggregate, count, page, key, timezoneOffset, dataAggregation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Query the top performing keys for a metric & aggregate
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {'sum' | 'avg'} [dataAggregation] How to aggregate the data
         * @param {string} [timestamp] Timestamp to fetch the top keys for
         * @param {'asc' | 'desc'} [orderDirection] Order direction for the top keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopMetricKeys(metric: MetricType, aggregate: Aggregate, count?: number, timezoneOffset?: string, dataAggregation?: 'sum' | 'avg', timestamp?: string, orderDirection?: 'asc' | 'desc', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTopMetricKeys200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopMetricKeys(metric, aggregate, count, timezoneOffset, dataAggregation, timestamp, orderDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change the default metrics seen on the home page
         * @param {UpdateHomeMetricsRequest} [updateHomeMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHomeMetrics(updateHomeMetricsRequest?: UpdateHomeMetricsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHomeMetrics(updateHomeMetricsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * Will return: - 30 results for the \"day\" aggregate - 12 results for the \"week\" aggregate - 6 results for the \"month\" aggregate 
         * @summary Get all metrics for the home page
         * @param {Aggregate} aggregate Aggregate function to use
         * @param {number} [page] 
         * @param {boolean} [includePreviousPeriod] 
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeMetrics(aggregate: Aggregate, page?: number, includePreviousPeriod?: boolean, timezoneOffset?: string, options?: any): AxiosPromise<GetHomeMetrics200Response> {
            return localVarFp.getHomeMetrics(aggregate, page, includePreviousPeriod, timezoneOffset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query a given metric
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {number} [page] 
         * @param {Array<string>} [key] fetch data for only these specific keys
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {DataAggregateType} [dataAggregation] How to aggregate the data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetrics(metric: MetricType, aggregate: Aggregate, count?: number, page?: number, key?: Array<string>, timezoneOffset?: string, dataAggregation?: DataAggregateType, options?: any): AxiosPromise<GetMetrics200Response> {
            return localVarFp.getMetrics(metric, aggregate, count, page, key, timezoneOffset, dataAggregation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Query the top performing keys for a metric & aggregate
         * @param {MetricType} metric 
         * @param {Aggregate} aggregate 
         * @param {number} [count] Number of results to return
         * @param {string} [timezoneOffset] Timezone offset to query the data in
         * @param {'sum' | 'avg'} [dataAggregation] How to aggregate the data
         * @param {string} [timestamp] Timestamp to fetch the top keys for
         * @param {'asc' | 'desc'} [orderDirection] Order direction for the top keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopMetricKeys(metric: MetricType, aggregate: Aggregate, count?: number, timezoneOffset?: string, dataAggregation?: 'sum' | 'avg', timestamp?: string, orderDirection?: 'asc' | 'desc', options?: any): AxiosPromise<GetTopMetricKeys200Response> {
            return localVarFp.getTopMetricKeys(metric, aggregate, count, timezoneOffset, dataAggregation, timestamp, orderDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change the default metrics seen on the home page
         * @param {UpdateHomeMetricsRequest} [updateHomeMetricsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHomeMetrics(updateHomeMetricsRequest?: UpdateHomeMetricsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateHomeMetrics(updateHomeMetricsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomeMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiGetHomeMetricsRequest
 */
export interface MetricsApiGetHomeMetricsRequest {
    /**
     * Aggregate function to use
     * @type {Aggregate}
     * @memberof MetricsApiGetHomeMetrics
     */
    readonly aggregate: Aggregate

    /**
     * 
     * @type {number}
     * @memberof MetricsApiGetHomeMetrics
     */
    readonly page?: number

    /**
     * 
     * @type {boolean}
     * @memberof MetricsApiGetHomeMetrics
     */
    readonly includePreviousPeriod?: boolean

    /**
     * Timezone offset to query the data in
     * @type {string}
     * @memberof MetricsApiGetHomeMetrics
     */
    readonly timezoneOffset?: string
}

/**
 * Request parameters for getMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiGetMetricsRequest
 */
export interface MetricsApiGetMetricsRequest {
    /**
     * 
     * @type {MetricType}
     * @memberof MetricsApiGetMetrics
     */
    readonly metric: MetricType

    /**
     * 
     * @type {Aggregate}
     * @memberof MetricsApiGetMetrics
     */
    readonly aggregate: Aggregate

    /**
     * Number of results to return
     * @type {number}
     * @memberof MetricsApiGetMetrics
     */
    readonly count?: number

    /**
     * 
     * @type {number}
     * @memberof MetricsApiGetMetrics
     */
    readonly page?: number

    /**
     * fetch data for only these specific keys
     * @type {Array<string>}
     * @memberof MetricsApiGetMetrics
     */
    readonly key?: Array<string>

    /**
     * Timezone offset to query the data in
     * @type {string}
     * @memberof MetricsApiGetMetrics
     */
    readonly timezoneOffset?: string

    /**
     * How to aggregate the data
     * @type {DataAggregateType}
     * @memberof MetricsApiGetMetrics
     */
    readonly dataAggregation?: DataAggregateType
}

/**
 * Request parameters for getTopMetricKeys operation in MetricsApi.
 * @export
 * @interface MetricsApiGetTopMetricKeysRequest
 */
export interface MetricsApiGetTopMetricKeysRequest {
    /**
     * 
     * @type {MetricType}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly metric: MetricType

    /**
     * 
     * @type {Aggregate}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly aggregate: Aggregate

    /**
     * Number of results to return
     * @type {number}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly count?: number

    /**
     * Timezone offset to query the data in
     * @type {string}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly timezoneOffset?: string

    /**
     * How to aggregate the data
     * @type {'sum' | 'avg'}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly dataAggregation?: 'sum' | 'avg'

    /**
     * Timestamp to fetch the top keys for
     * @type {string}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly timestamp?: string

    /**
     * Order direction for the top keys
     * @type {'asc' | 'desc'}
     * @memberof MetricsApiGetTopMetricKeys
     */
    readonly orderDirection?: 'asc' | 'desc'
}

/**
 * Request parameters for updateHomeMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiUpdateHomeMetricsRequest
 */
export interface MetricsApiUpdateHomeMetricsRequest {
    /**
     * 
     * @type {UpdateHomeMetricsRequest}
     * @memberof MetricsApiUpdateHomeMetrics
     */
    readonly updateHomeMetricsRequest?: UpdateHomeMetricsRequest
}

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
    /**
     * Will return: - 30 results for the \"day\" aggregate - 12 results for the \"week\" aggregate - 6 results for the \"month\" aggregate 
     * @summary Get all metrics for the home page
     * @param {MetricsApiGetHomeMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getHomeMetrics(requestParameters: MetricsApiGetHomeMetricsRequest, options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getHomeMetrics(requestParameters.aggregate, requestParameters.page, requestParameters.includePreviousPeriod, requestParameters.timezoneOffset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query a given metric
     * @param {MetricsApiGetMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getMetrics(requestParameters: MetricsApiGetMetricsRequest, options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getMetrics(requestParameters.metric, requestParameters.aggregate, requestParameters.count, requestParameters.page, requestParameters.key, requestParameters.timezoneOffset, requestParameters.dataAggregation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Query the top performing keys for a metric & aggregate
     * @param {MetricsApiGetTopMetricKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public getTopMetricKeys(requestParameters: MetricsApiGetTopMetricKeysRequest, options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).getTopMetricKeys(requestParameters.metric, requestParameters.aggregate, requestParameters.count, requestParameters.timezoneOffset, requestParameters.dataAggregation, requestParameters.timestamp, requestParameters.orderDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change the default metrics seen on the home page
     * @param {MetricsApiUpdateHomeMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    public updateHomeMetrics(requestParameters: MetricsApiUpdateHomeMetricsRequest = {}, options?: AxiosRequestConfig) {
        return MetricsApiFp(this.configuration).updateHomeMetrics(requestParameters.updateHomeMetricsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


