const BASE_PATH = "https://api-events.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * ChatDaddy Events Service
 * Receive live events from ChatDaddy via a WebSocket or register a web hook 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface AccountDelete
 */
export interface AccountDelete {
    /**
     * 
     * @type {string}
     * @memberof AccountDelete
     */
    'event': AccountDeleteEventEnum;
    /**
     * 
     * @type {Array<AccountDeleteData>}
     * @memberof AccountDelete
     */
    'data': Array<AccountDeleteData>;
}

export const AccountDeleteEventEnum = {
    AccountDelete: 'account-delete'
} as const;

export type AccountDeleteEventEnum = typeof AccountDeleteEventEnum[keyof typeof AccountDeleteEventEnum];

/**
 * 
 * @export
 * @interface AccountDeleteData
 */
export interface AccountDeleteData {
    /**
     * 
     * @type {string}
     * @memberof AccountDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface AccountInsert
 */
export interface AccountInsert {
    /**
     * 
     * @type {string}
     * @memberof AccountInsert
     */
    'event': AccountInsertEventEnum;
    /**
     * 
     * @type {Array<AccountInsertData>}
     * @memberof AccountInsert
     */
    'data': Array<AccountInsertData>;
}

export const AccountInsertEventEnum = {
    AccountInsert: 'account-insert'
} as const;

export type AccountInsertEventEnum = typeof AccountInsertEventEnum[keyof typeof AccountInsertEventEnum];

/**
 * 
 * @export
 * @interface AccountInsertData
 */
export interface AccountInsertData {
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'ownerId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertData
     */
    'assignees'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'nickname': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountInsertData
     */
    'credentials'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'tier'?: AccountInsertDataTierEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'type': AccountInsertDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastLogoutAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'lastClosedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'state': AccountInsertDataStateEnum;
    /**
     * 
     * @type {AccountInsertDataError}
     * @memberof AccountInsertData
     */
    'error'?: AccountInsertDataError | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountInsertData
     */
    'stateInfo': { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertData
     */
    'canLogin': boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertData
     */
    'userId'?: string | null;
    /**
     * 
     * @type {AccountInsertDataSettings}
     * @memberof AccountInsertData
     */
    'settings': AccountInsertDataSettings;
}

export const AccountInsertDataTierEnum = {
    LimitedMsgNoChatHistory: 'limited_msg_no_chat_history',
    UnlimitedMsgChatHistory: 'unlimited_msg_chat_history'
} as const;

export type AccountInsertDataTierEnum = typeof AccountInsertDataTierEnum[keyof typeof AccountInsertDataTierEnum];
export const AccountInsertDataTypeEnum = {
    Wa: 'wa',
    WaBusinessApi: 'wa-business-api',
    Mock: 'mock',
    Tiktok: 'tiktok',
    Messenger: 'messenger'
} as const;

export type AccountInsertDataTypeEnum = typeof AccountInsertDataTypeEnum[keyof typeof AccountInsertDataTypeEnum];
export const AccountInsertDataStateEnum = {
    Open: 'open',
    Connecting: 'connecting',
    Close: 'close'
} as const;

export type AccountInsertDataStateEnum = typeof AccountInsertDataStateEnum[keyof typeof AccountInsertDataStateEnum];

/**
 * 
 * @export
 * @interface AccountInsertDataError
 */
export interface AccountInsertDataError {
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettings
 */
export interface AccountInsertDataSettings {
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertDataSettings
     */
    'notifyUsers'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'enableHistorySync'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountInsertDataSettings
     */
    'maxMessageSync'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'nativeChatActionSync'?: boolean;
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssignee}
     * @memberof AccountInsertDataSettings
     */
    'newChatsAssignee'?: AccountInsertDataSettingsNewChatsAssignee;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'sendButtonsAsPoll'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettings
     */
    'autoSyncProductsToPlatform'?: boolean;
    /**
     * 
     * @type {AccountInsertDataSettingsKeepDeletedMessages}
     * @memberof AccountInsertDataSettings
     */
    'keepDeletedMessages'?: AccountInsertDataSettingsKeepDeletedMessages;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettings
     */
    'geoLocation'?: string;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsKeepDeletedMessages
 */
export interface AccountInsertDataSettingsKeepDeletedMessages {
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettingsKeepDeletedMessages
     */
    'fromMe': boolean;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsNewChatsAssignee
 */
export interface AccountInsertDataSettingsNewChatsAssignee {
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssigneeIncoming}
     * @memberof AccountInsertDataSettingsNewChatsAssignee
     */
    'incoming'?: AccountInsertDataSettingsNewChatsAssigneeIncoming;
    /**
     * 
     * @type {AccountInsertDataSettingsNewChatsAssigneeIncoming}
     * @memberof AccountInsertDataSettingsNewChatsAssignee
     */
    'outgoing'?: AccountInsertDataSettingsNewChatsAssigneeIncoming;
}
/**
 * 
 * @export
 * @interface AccountInsertDataSettingsNewChatsAssigneeIncoming
 */
export interface AccountInsertDataSettingsNewChatsAssigneeIncoming {
    /**
     * 
     * @type {boolean}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'assignType'?: AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'nextAssignee'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountInsertDataSettingsNewChatsAssigneeIncoming
     */
    'assignees'?: Array<string>;
}

export const AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum = {
    SmartAssign: 'smart-assign',
    RoundRobin: 'round-robin'
} as const;

export type AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum = typeof AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum[keyof typeof AccountInsertDataSettingsNewChatsAssigneeIncomingAssignTypeEnum];

/**
 * 
 * @export
 * @interface AccountUpdate
 */
export interface AccountUpdate {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdate
     */
    'event': AccountUpdateEventEnum;
    /**
     * 
     * @type {Array<AccountUpdateData>}
     * @memberof AccountUpdate
     */
    'data': Array<AccountUpdateData>;
}

export const AccountUpdateEventEnum = {
    AccountUpdate: 'account-update'
} as const;

export type AccountUpdateEventEnum = typeof AccountUpdateEventEnum[keyof typeof AccountUpdateEventEnum];

/**
 * 
 * @export
 * @interface AccountUpdateData
 */
export interface AccountUpdateData {
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'ownerId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountUpdateData
     */
    'assignees'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'nickname'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountUpdateData
     */
    'credentials'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'tier'?: AccountUpdateDataTierEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'type'?: AccountUpdateDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastLoginAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastLogoutAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'lastClosedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'state'?: AccountUpdateDataStateEnum;
    /**
     * 
     * @type {AccountInsertDataError}
     * @memberof AccountUpdateData
     */
    'error'?: AccountInsertDataError | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AccountUpdateData
     */
    'stateInfo'?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof AccountUpdateData
     */
    'canLogin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountUpdateData
     */
    'userId'?: string | null;
    /**
     * 
     * @type {AccountInsertDataSettings}
     * @memberof AccountUpdateData
     */
    'settings'?: AccountInsertDataSettings;
}

export const AccountUpdateDataTierEnum = {
    LimitedMsgNoChatHistory: 'limited_msg_no_chat_history',
    UnlimitedMsgChatHistory: 'unlimited_msg_chat_history'
} as const;

export type AccountUpdateDataTierEnum = typeof AccountUpdateDataTierEnum[keyof typeof AccountUpdateDataTierEnum];
export const AccountUpdateDataTypeEnum = {
    Wa: 'wa',
    WaBusinessApi: 'wa-business-api',
    Mock: 'mock',
    Tiktok: 'tiktok',
    Messenger: 'messenger'
} as const;

export type AccountUpdateDataTypeEnum = typeof AccountUpdateDataTypeEnum[keyof typeof AccountUpdateDataTypeEnum];
export const AccountUpdateDataStateEnum = {
    Open: 'open',
    Connecting: 'connecting',
    Close: 'close'
} as const;

export type AccountUpdateDataStateEnum = typeof AccountUpdateDataStateEnum[keyof typeof AccountUpdateDataStateEnum];

/**
 * 
 * @export
 * @interface ActionExecute
 */
export interface ActionExecute {
    /**
     * 
     * @type {string}
     * @memberof ActionExecute
     */
    'event': ActionExecuteEventEnum;
    /**
     * 
     * @type {Array<ActionExecuteData>}
     * @memberof ActionExecute
     */
    'data': Array<ActionExecuteData>;
}

export const ActionExecuteEventEnum = {
    ActionExecute: 'action-execute'
} as const;

export type ActionExecuteEventEnum = typeof ActionExecuteEventEnum[keyof typeof ActionExecuteEventEnum];

/**
 * 
 * @export
 * @interface ActionExecuteData
 */
export interface ActionExecuteData {
    /**
     * 
     * @type {number}
     * @memberof ActionExecuteData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'actionId': string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'botId': string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'status'?: ActionExecuteDataStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'contactId'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActionExecuteData
     */
    'inputParameters'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof ActionExecuteData
     */
    'messages'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof ActionExecuteData
     */
    'webhooks'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {ActionExecuteDataMessagesInner}
     * @memberof ActionExecuteData
     */
    'contact'?: ActionExecuteDataMessagesInner;
    /**
     * 
     * @type {boolean}
     * @memberof ActionExecuteData
     */
    'isStart'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ActionExecuteData
     */
    'isFinal'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActionExecuteData
     */
    'previousActionId'?: string;
}

export const ActionExecuteDataStatusEnum = {
    Pending: 'pending',
    Sent: 'sent',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;

export type ActionExecuteDataStatusEnum = typeof ActionExecuteDataStatusEnum[keyof typeof ActionExecuteDataStatusEnum];

/**
 * 
 * @export
 * @interface ActionExecuteDataMessagesInner
 */
export interface ActionExecuteDataMessagesInner {
    /**
     * 
     * @type {number}
     * @memberof ActionExecuteDataMessagesInner
     */
    'statusCode': number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ActionExecuteDataMessagesInner
     */
    'body'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface AlarmPost200Response
 */
export interface AlarmPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof AlarmPost200Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface AlarmPostRequest
 */
export interface AlarmPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AlarmPostRequest
     */
    'title': string;
    /**
     * The message to send
     * @type {string}
     * @memberof AlarmPostRequest
     */
    'message': string;
    /**
     * If severe, will mention @all
     * @type {boolean}
     * @memberof AlarmPostRequest
     */
    'isSevere'?: boolean;
    /**
     * Any additional parameters to send
     * @type {{ [key: string]: any; }}
     * @memberof AlarmPostRequest
     */
    'parameters'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface BotDelete
 */
export interface BotDelete {
    /**
     * 
     * @type {string}
     * @memberof BotDelete
     */
    'event': BotDeleteEventEnum;
    /**
     * 
     * @type {Array<BotDeleteData>}
     * @memberof BotDelete
     */
    'data': Array<BotDeleteData>;
}

export const BotDeleteEventEnum = {
    BotDelete: 'bot-delete'
} as const;

export type BotDeleteEventEnum = typeof BotDeleteEventEnum[keyof typeof BotDeleteEventEnum];

/**
 * 
 * @export
 * @interface BotDeleteData
 */
export interface BotDeleteData {
    /**
     * 
     * @type {string}
     * @memberof BotDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface BotInsert
 */
export interface BotInsert {
    /**
     * 
     * @type {string}
     * @memberof BotInsert
     */
    'event': BotInsertEventEnum;
    /**
     * 
     * @type {Array<BotInsertData>}
     * @memberof BotInsert
     */
    'data': Array<BotInsertData>;
}

export const BotInsertEventEnum = {
    BotInsert: 'bot-insert'
} as const;

export type BotInsertEventEnum = typeof BotInsertEventEnum[keyof typeof BotInsertEventEnum];

/**
 * 
 * @export
 * @interface BotInsertData
 */
export interface BotInsertData {
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'defaultAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'startingActionId'?: string | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInner>}
     * @memberof BotInsertData
     */
    'actions'?: Array<BotInsertDataActionsInner>;
    /**
     * 
     * @type {Array<BotInsertDataStartTriggersInner>}
     * @memberof BotInsertData
     */
    'startTriggers'?: Array<BotInsertDataStartTriggersInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'folderId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertData
     */
    'isForm'?: boolean;
    /**
     * 
     * @type {{ [key: string]: BotInsertDataExternalTemplateValue; }}
     * @memberof BotInsertData
     */
    'externalTemplate'?: { [key: string]: BotInsertDataExternalTemplateValue; };
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'industry'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'language'?: string;
    /**
     * 
     * @type {Array<BotInsertDataNotesInner>}
     * @memberof BotInsertData
     */
    'notes'?: Array<BotInsertDataNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<BotInsertDataSharedSlugsInner>}
     * @memberof BotInsertData
     */
    'sharedSlugs'?: Array<BotInsertDataSharedSlugsInner>;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInner
 */
export interface BotInsertDataActionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'botId'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'name': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1Message}
     * @memberof BotInsertDataActionsInner
     */
    'message'?: BotInsertDataActionsInnerAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotInsertDataActionsInner
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotInsertDataActionsInner
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInner
     */
    'notifyUsers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInner
     */
    'webhooks'?: Array<string>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotInsertDataActionsInner
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotInsertDataActionsInner
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotInsertDataActionsInner
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf
 */
export interface BotInsertDataActionsInnerAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1
 */
export interface BotInsertDataActionsInnerAllOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'botId'?: string;
    /**
     * Name of the template
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'name'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1Message}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'message'?: BotInsertDataActionsInnerAllOf1Message | null;
    /**
     * set the assignee on the contact
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'assignee'?: string | null;
    /**
     * Tags to set on this contact.
     * @type {Array<BotInsertDataActionsInnerAllOf1TagsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'tags'?: Array<BotInsertDataActionsInnerAllOf1TagsInner> | null;
    /**
     * Array of UserId
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'notifyUsers'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'webhooks'?: Array<string>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
    /**
     * send in to remove the action
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'remove'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRef}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'formRef'?: BotInsertDataActionsInnerAllOf1FormRef;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormActionMetadata}
     * @memberof BotInsertDataActionsInnerAllOf1
     */
    'formActionMetadata'?: BotInsertDataActionsInnerAllOf1FormActionMetadata;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormActionMetadata
 */
export interface BotInsertDataActionsInnerAllOf1FormActionMetadata {
    /**
     * If true, the field is required
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'required'?: boolean;
    /**
     * Type of the field
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'type'?: BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum;
    /**
     * Index of the field
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1FormActionMetadata
     */
    'index'?: number;
}

export const BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum = {
    Text: 'text',
    Number: 'number',
    Date: 'date',
    Select: 'select',
    Multiselect: 'multiselect',
    Rating: 'rating',
    Nps: 'nps',
    Time: 'time'
} as const;

export type BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum = typeof BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1FormActionMetadataTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormRef
 */
export interface BotInsertDataActionsInnerAllOf1FormRef {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1FormRef
     */
    'id': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1FormRefActions}
     * @memberof BotInsertDataActionsInnerAllOf1FormRef
     */
    'actions'?: BotInsertDataActionsInnerAllOf1FormRefActions;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1FormRefActions
 */
export interface BotInsertDataActionsInnerAllOf1FormRefActions {
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1FormRefActions
     */
    'onSubmit'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1FormRefActions
     */
    'onAbandon'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1Message
 */
export interface BotInsertDataActionsInnerAllOf1Message {
    /**
     * the template message itself
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'text': string | null;
    /**
     * array of attachments for the template
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'attachments'?: Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'buttons'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInner>;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageDelaysInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'delays'?: Array<BotInsertDataActionsInnerAllOf1MessageDelaysInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageInput}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'input'?: BotInsertDataActionsInnerAllOf1MessageInput;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageList}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'list'?: BotInsertDataActionsInnerAllOf1MessageList;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'quoted'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1Message
     */
    'products'?: Array<BotInsertDataActionsInnerAllOf1MessageProductsInner>;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageAttachmentsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'type': BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'jpegThumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'seconds'?: number;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageAttachmentsInner
     */
    'pttAudio'?: boolean;
}

export const BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum = {
    Image: 'image',
    Video: 'video',
    Contact: 'contact',
    Sticker: 'sticker',
    Audio: 'audio',
    Document: 'document',
    Location: 'location'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageAttachmentsInnerTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'text': string;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     * @deprecated
     */
    'triggerActionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'triggerBotId'?: string | null;
    /**
     * Make a button with a link
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'url'?: string;
    /**
     * Make a button with a phone number
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * Specify the next action to be fired
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction {
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'defaultAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction;
    /**
     * List of conditions to validate
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'groups'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * Fired if all validations failed or no validations are provided
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultAction
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionDefaultActionAllOf
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner {
    /**
     * Operator for all validations
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum;
    /**
     * Fields to validate
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'validation': Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInner
     */
    'target': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum = {
    And: 'and',
    Or: 'or'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerOperatorEnum];

/**
 * Action to fire if all validations pass
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'triggerActionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'triggerBotId'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerTarget
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner
     */
    'propertyPath': string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerValuesInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner
     */
    'values': Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerValuesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner
     */
    'operator': BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOperatorEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOperatorEnum = {
    Equals: 'equals',
    NotEquals: 'notEquals',
    GreaterThan: 'greaterThan',
    LessThan: 'lessThan',
    GreaterThanOrEquals: 'greaterThanOrEquals',
    LessThanOrEquals: 'lessThanOrEquals',
    Contains: 'contains',
    NotContains: 'notContains',
    StartsWith: 'startsWith',
    EndsWith: 'endsWith'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOperatorEnum = typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOperatorEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerOperatorEnum];

/**
 * @type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerValuesInner
 * @export
 */
export type BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInnerValuesInner = number | string;

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
 */
export interface BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition {
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition
     */
    'y': number;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageDelaysInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageDelaysInner {
    /**
     * Time delays on second
     * @type {number}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'timeDelaySec': number;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     * @deprecated
     */
    'triggerActionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'triggerBotId'?: string | null;
    /**
     * Simulate typing
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'simulateTyping'?: boolean;
    /**
     * If true, the message will be cancelled if a reply is received
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageDelaysInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageInput
 */
export interface BotInsertDataActionsInnerAllOf1MessageInput {
    /**
     * Name of the input
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'name': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageInputValidation}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'validation'?: BotInsertDataActionsInnerAllOf1MessageInputValidation;
    /**
     * Use \"nextAction\" instead
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     * @deprecated
     */
    'triggerActionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'triggerBotId'?: string | null;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInput
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageInputValidation
 */
export interface BotInsertDataActionsInnerAllOf1MessageInputValidation {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageInputValidation
     */
    'type': BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum;
}

export const BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum = {
    String: 'string',
    Integer: 'integer'
} as const;

export type BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum = typeof BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum[keyof typeof BotInsertDataActionsInnerAllOf1MessageInputValidationTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageList
 */
export interface BotInsertDataActionsInnerAllOf1MessageList {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'title'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'sections': Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInner>;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataActionsInnerAllOf1MessageList
     */
    'position'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageListSectionsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageListSectionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInner
     */
    'title': string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner>}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInner
     */
    'options': Array<BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner>;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'description'?: string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction}
     * @memberof BotInsertDataActionsInnerAllOf1MessageListSectionsInnerOptionsInner
     */
    'nextAction'?: BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextAction;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1MessageProductsInner
 */
export interface BotInsertDataActionsInnerAllOf1MessageProductsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageProductsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1MessageProductsInner
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface BotInsertDataActionsInnerAllOf1TagsInner
 */
export interface BotInsertDataActionsInnerAllOf1TagsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataActionsInnerAllOf1TagsInner
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataActionsInnerAllOf1TagsInner
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface BotInsertDataExternalTemplateValue
 */
export interface BotInsertDataExternalTemplateValue {
    /**
     * ID of the template on the provider
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'category': string;
    /**
     * Language of the template
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'language'?: string;
    /**
     * Status of the template on the provider
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'status': BotInsertDataExternalTemplateValueStatusEnum;
    /**
     * Details of the rejection, if rejected
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'rejectionDetails'?: string;
    /**
     * ID of the user who submitted the template
     * @type {string}
     * @memberof BotInsertDataExternalTemplateValue
     */
    'submittedBy': string;
}

export const BotInsertDataExternalTemplateValueStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type BotInsertDataExternalTemplateValueStatusEnum = typeof BotInsertDataExternalTemplateValueStatusEnum[keyof typeof BotInsertDataExternalTemplateValueStatusEnum];

/**
 * 
 * @export
 * @interface BotInsertDataNotesInner
 */
export interface BotInsertDataNotesInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'id'?: string;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>}
     * @memberof BotInsertDataNotesInner
     */
    'attachments'?: Array<BotInsertDataActionsInnerAllOf1MessageAttachmentsInner>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataNotesInner
     */
    'title': string;
    /**
     * 
     * @type {BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition}
     * @memberof BotInsertDataNotesInner
     */
    'position': BotInsertDataActionsInnerAllOf1MessageButtonsInnerPosition;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataNotesInner
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface BotInsertDataSharedSlugsInner
 */
export interface BotInsertDataSharedSlugsInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'editable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataSharedSlugsInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInner
 */
export interface BotInsertDataStartTriggersInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInner
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInner
     */
    'botId': string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInner
     */
    'enabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInner
     */
    'sendInterval'?: number;
    /**
     * 
     * @type {Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>}
     * @memberof BotInsertDataStartTriggersInner
     */
    'conditions'?: Array<BotInsertDataActionsInnerAllOf1MessageButtonsInnerNextActionGroupsInnerValidationInner>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataStartTriggersInner
     */
    'context'?: { [key: string]: any; };
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerMethod}
     * @memberof BotInsertDataStartTriggersInner
     */
    'method': BotInsertDataStartTriggersInnerMethod;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerTarget}
     * @memberof BotInsertDataStartTriggersInner
     */
    'target': BotInsertDataStartTriggersInnerTarget;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerOptions}
     * @memberof BotInsertDataStartTriggersInner
     */
    'options'?: BotInsertDataStartTriggersInnerOptions;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInner
     */
    'lastTriggered'?: string;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInner
     */
    'triggered'?: number;
    /**
     * 
     * @type {Array<BotInsertDataStartTriggersInnerInstancesInner>}
     * @memberof BotInsertDataStartTriggersInner
     */
    'instances'?: Array<BotInsertDataStartTriggersInnerInstancesInner>;
}
/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerInstancesInner
 */
export interface BotInsertDataStartTriggersInnerInstancesInner {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'id'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'payload'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'startedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'status'?: BotInsertDataStartTriggersInnerInstancesInnerStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'triggerId'?: string;
    /**
     * 
     * @type {Array<BotInsertDataStartTriggersInnerInstancesInnerRecordsInner>}
     * @memberof BotInsertDataStartTriggersInnerInstancesInner
     */
    'records'?: Array<BotInsertDataStartTriggersInnerInstancesInnerRecordsInner>;
}

export const BotInsertDataStartTriggersInnerInstancesInnerStatusEnum = {
    Pending: 'pending',
    Running: 'running',
    Completed: 'completed',
    Cancelled: 'cancelled'
} as const;

export type BotInsertDataStartTriggersInnerInstancesInnerStatusEnum = typeof BotInsertDataStartTriggersInnerInstancesInnerStatusEnum[keyof typeof BotInsertDataStartTriggersInnerInstancesInnerStatusEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
 */
export interface BotInsertDataStartTriggersInnerInstancesInnerRecordsInner {
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'actionId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'botId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'instanceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'status'?: BotInsertDataStartTriggersInnerInstancesInnerRecordsInnerStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'contactId'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'inputParameters'?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'messages'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {Array<ActionExecuteDataMessagesInner>}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'webhooks'?: Array<ActionExecuteDataMessagesInner>;
    /**
     * 
     * @type {ActionExecuteDataMessagesInner}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'contact'?: ActionExecuteDataMessagesInner;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'isStart'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'isFinal'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerInstancesInnerRecordsInner
     */
    'previousActionId'?: string;
}

export const BotInsertDataStartTriggersInnerInstancesInnerRecordsInnerStatusEnum = {
    Pending: 'pending',
    Sent: 'sent',
    Failed: 'failed',
    Cancelled: 'cancelled'
} as const;

export type BotInsertDataStartTriggersInnerInstancesInnerRecordsInnerStatusEnum = typeof BotInsertDataStartTriggersInnerInstancesInnerRecordsInnerStatusEnum[keyof typeof BotInsertDataStartTriggersInnerInstancesInnerRecordsInnerStatusEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerMethod
 */
export interface BotInsertDataStartTriggersInnerMethod {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerMethod
     */
    'type': BotInsertDataStartTriggersInnerMethodTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerMethod
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerMethod
     */
    'nextExecutionDate'?: string;
}

export const BotInsertDataStartTriggersInnerMethodTypeEnum = {
    Webhook: 'webhook',
    Timestamp: 'timestamp',
    Event: 'event'
} as const;

export type BotInsertDataStartTriggersInnerMethodTypeEnum = typeof BotInsertDataStartTriggersInnerMethodTypeEnum[keyof typeof BotInsertDataStartTriggersInnerMethodTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerOptions
 */
export interface BotInsertDataStartTriggersInnerOptions {
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerOptionsMiscOptions}
     * @memberof BotInsertDataStartTriggersInnerOptions
     */
    'miscOptions'?: BotInsertDataStartTriggersInnerOptionsMiscOptions;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BotInsertDataStartTriggersInnerOptions
     */
    'parameters'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerOptionsMiscOptions
 */
export interface BotInsertDataStartTriggersInnerOptionsMiscOptions {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'messageId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'simulateTyping'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'requireOpenAccount'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'cancelIfReplyReceived'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'scheduleAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'includeMarketingMessage'?: boolean;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'quoted'?: BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerOptionsMiscOptionsSender}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptions
     */
    'sender'?: BotInsertDataStartTriggersInnerOptionsMiscOptionsSender;
}
/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted
 */
export interface BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptionsQuoted
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerOptionsMiscOptionsSender
 */
export interface BotInsertDataStartTriggersInnerOptionsMiscOptionsSender {
    /**
     * 
     * @type {MessageInsertDataSenderContext}
     * @memberof BotInsertDataStartTriggersInnerOptionsMiscOptionsSender
     */
    'context': MessageInsertDataSenderContext;
}
/**
 * @type BotInsertDataStartTriggersInnerTarget
 * @export
 */
export type BotInsertDataStartTriggersInnerTarget = BotInsertDataStartTriggersInnerTargetOneOf | BotInsertDataStartTriggersInnerTargetOneOf1;

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerTargetOneOf
 */
export interface BotInsertDataStartTriggersInnerTargetOneOf {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf
     */
    'type': BotInsertDataStartTriggersInnerTargetOneOfTypeEnum;
    /**
     * Path of the property to access in the payload. Payload has the following properties 1. \'contact.*\' to access a property of the contact being sent to. Find structure of contact here 2. \'data.*\' to access a property of the event data 3. \'context.*\' to access a property of the context (note: probably add context schema to openapi spec?)
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf
     */
    'propertyPath': string;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerTargetOneOfAccountId}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf
     */
    'accountId': BotInsertDataStartTriggersInnerTargetOneOfAccountId;
}

export const BotInsertDataStartTriggersInnerTargetOneOfTypeEnum = {
    PropertyPath: 'propertyPath'
} as const;

export type BotInsertDataStartTriggersInnerTargetOneOfTypeEnum = typeof BotInsertDataStartTriggersInnerTargetOneOfTypeEnum[keyof typeof BotInsertDataStartTriggersInnerTargetOneOfTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerTargetOneOf1
 */
export interface BotInsertDataStartTriggersInnerTargetOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1
     */
    'type': BotInsertDataStartTriggersInnerTargetOneOf1TypeEnum;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerTargetOneOf1Query}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1
     */
    'query': BotInsertDataStartTriggersInnerTargetOneOf1Query;
    /**
     * 
     * @type {BotInsertDataStartTriggersInnerTargetOneOf1AccountId}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1
     */
    'accountId': BotInsertDataStartTriggersInnerTargetOneOf1AccountId;
}

export const BotInsertDataStartTriggersInnerTargetOneOf1TypeEnum = {
    Fetch: 'fetch'
} as const;

export type BotInsertDataStartTriggersInnerTargetOneOf1TypeEnum = typeof BotInsertDataStartTriggersInnerTargetOneOf1TypeEnum[keyof typeof BotInsertDataStartTriggersInnerTargetOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerTargetOneOf1AccountId
 */
export interface BotInsertDataStartTriggersInnerTargetOneOf1AccountId {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1AccountId
     */
    'type': BotInsertDataStartTriggersInnerTargetOneOf1AccountIdTypeEnum;
    /**
     * the property name to extract `accountId` from of the contact, or the exact ID of the account
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1AccountId
     */
    'value': string;
}

export const BotInsertDataStartTriggersInnerTargetOneOf1AccountIdTypeEnum = {
    PropertyPath: 'propertyPath',
    Exact: 'exact'
} as const;

export type BotInsertDataStartTriggersInnerTargetOneOf1AccountIdTypeEnum = typeof BotInsertDataStartTriggersInnerTargetOneOf1AccountIdTypeEnum[keyof typeof BotInsertDataStartTriggersInnerTargetOneOf1AccountIdTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerTargetOneOf1Query
 */
export interface BotInsertDataStartTriggersInnerTargetOneOf1Query {
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'notTags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'q'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'minMessagesSent'?: number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'maxMessagesSent'?: number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'minMessagesRecv'?: number;
    /**
     * 
     * @type {number}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'maxMessagesRecv'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'assignee'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'notAssignee'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'type'?: BotInsertDataStartTriggersInnerTargetOneOf1QueryTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'contacts'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'notContacts'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOf1Query
     */
    'accountId'?: Array<string>;
}

export const BotInsertDataStartTriggersInnerTargetOneOf1QueryTypeEnum = {
    Individual: 'individual',
    Group: 'group'
} as const;

export type BotInsertDataStartTriggersInnerTargetOneOf1QueryTypeEnum = typeof BotInsertDataStartTriggersInnerTargetOneOf1QueryTypeEnum[keyof typeof BotInsertDataStartTriggersInnerTargetOneOf1QueryTypeEnum];

/**
 * 
 * @export
 * @interface BotInsertDataStartTriggersInnerTargetOneOfAccountId
 */
export interface BotInsertDataStartTriggersInnerTargetOneOfAccountId {
    /**
     * 
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOfAccountId
     */
    'type': BotInsertDataStartTriggersInnerTargetOneOfAccountIdTypeEnum;
    /**
     * the property name to extract `accountId` from, or the exact ID of the account
     * @type {string}
     * @memberof BotInsertDataStartTriggersInnerTargetOneOfAccountId
     */
    'value': string;
}

export const BotInsertDataStartTriggersInnerTargetOneOfAccountIdTypeEnum = {
    PropertyPath: 'propertyPath',
    Exact: 'exact'
} as const;

export type BotInsertDataStartTriggersInnerTargetOneOfAccountIdTypeEnum = typeof BotInsertDataStartTriggersInnerTargetOneOfAccountIdTypeEnum[keyof typeof BotInsertDataStartTriggersInnerTargetOneOfAccountIdTypeEnum];

/**
 * 
 * @export
 * @interface BotUpdate
 */
export interface BotUpdate {
    /**
     * 
     * @type {string}
     * @memberof BotUpdate
     */
    'event': BotUpdateEventEnum;
    /**
     * 
     * @type {Array<BotUpdateData>}
     * @memberof BotUpdate
     */
    'data': Array<BotUpdateData>;
}

export const BotUpdateEventEnum = {
    BotUpdate: 'bot-update'
} as const;

export type BotUpdateEventEnum = typeof BotUpdateEventEnum[keyof typeof BotUpdateEventEnum];

/**
 * 
 * @export
 * @interface BotUpdateData
 */
export interface BotUpdateData {
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'defaultAccountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'startingActionId'?: string | null;
    /**
     * 
     * @type {Array<BotInsertDataActionsInner>}
     * @memberof BotUpdateData
     */
    'actions'?: Array<BotInsertDataActionsInner>;
    /**
     * 
     * @type {Array<BotInsertDataStartTriggersInner>}
     * @memberof BotUpdateData
     */
    'startTriggers'?: Array<BotInsertDataStartTriggersInner>;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'folderId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BotUpdateData
     */
    'isForm'?: boolean;
    /**
     * 
     * @type {{ [key: string]: BotInsertDataExternalTemplateValue; }}
     * @memberof BotUpdateData
     */
    'externalTemplate'?: { [key: string]: BotInsertDataExternalTemplateValue; };
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'industry'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'language'?: string;
    /**
     * 
     * @type {Array<BotInsertDataNotesInner>}
     * @memberof BotUpdateData
     */
    'notes'?: Array<BotInsertDataNotesInner>;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BotUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<BotInsertDataSharedSlugsInner>}
     * @memberof BotUpdateData
     */
    'sharedSlugs'?: Array<BotInsertDataSharedSlugsInner>;
}
/**
 * 
 * @export
 * @interface ChatDelete
 */
export interface ChatDelete {
    /**
     * 
     * @type {string}
     * @memberof ChatDelete
     */
    'event': ChatDeleteEventEnum;
    /**
     * 
     * @type {Array<ChatDeleteData>}
     * @memberof ChatDelete
     */
    'data': Array<ChatDeleteData>;
}

export const ChatDeleteEventEnum = {
    ChatDelete: 'chat-delete'
} as const;

export type ChatDeleteEventEnum = typeof ChatDeleteEventEnum[keyof typeof ChatDeleteEventEnum];

/**
 * 
 * @export
 * @interface ChatDeleteData
 */
export interface ChatDeleteData {
    /**
     * 
     * @type {string}
     * @memberof ChatDeleteData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ChatInsert
 */
export interface ChatInsert {
    /**
     * 
     * @type {string}
     * @memberof ChatInsert
     */
    'event': ChatInsertEventEnum;
    /**
     * 
     * @type {Array<ChatInsertData>}
     * @memberof ChatInsert
     */
    'data': Array<ChatInsertData>;
}

export const ChatInsertEventEnum = {
    ChatInsert: 'chat-insert'
} as const;

export type ChatInsertEventEnum = typeof ChatInsertEventEnum[keyof typeof ChatInsertEventEnum];

/**
 * 
 * @export
 * @interface ChatInsertData
 */
export interface ChatInsertData {
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'lastMessage': string;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'unread': number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'spam'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'archive': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'readOnly': boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'ticketStatus'?: ChatInsertDataTicketStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'mute'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'pin'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'isUserGenerated': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasPendingMessage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasUnsolvedNote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasFailedMessage'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatInsertData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChatInsertData
     */
    'disappearingMessages'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatInsertData
     */
    'hasEntireMessageHistory': boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatInsertData
     */
    'cursor': string;
}

export const ChatInsertDataTicketStatusEnum = {
    Closed: 'closed',
    Null: null as null
} as const;

export type ChatInsertDataTicketStatusEnum = typeof ChatInsertDataTicketStatusEnum[keyof typeof ChatInsertDataTicketStatusEnum];

/**
 * 
 * @export
 * @interface ChatUpdate
 */
export interface ChatUpdate {
    /**
     * 
     * @type {string}
     * @memberof ChatUpdate
     */
    'event': ChatUpdateEventEnum;
    /**
     * 
     * @type {Array<ChatUpdateData>}
     * @memberof ChatUpdate
     */
    'data': Array<ChatUpdateData>;
}

export const ChatUpdateEventEnum = {
    ChatUpdate: 'chat-update'
} as const;

export type ChatUpdateEventEnum = typeof ChatUpdateEventEnum[keyof typeof ChatUpdateEventEnum];

/**
 * 
 * @export
 * @interface ChatUpdateData
 */
export interface ChatUpdateData {
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'lastMessage'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'unread'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'spam'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'archive'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'readOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'ticketStatus'?: ChatUpdateDataTicketStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'mute'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'pin'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'isUserGenerated'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasPendingMessage'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasUnsolvedNote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasFailedMessage'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatUpdateData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChatUpdateData
     */
    'disappearingMessages'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatUpdateData
     */
    'hasEntireMessageHistory'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatUpdateData
     */
    'cursor'?: string;
}

export const ChatUpdateDataTicketStatusEnum = {
    Closed: 'closed',
    Null: null as null
} as const;

export type ChatUpdateDataTicketStatusEnum = typeof ChatUpdateDataTicketStatusEnum[keyof typeof ChatUpdateDataTicketStatusEnum];

/**
 * 
 * @export
 * @interface ContactDelete
 */
export interface ContactDelete {
    /**
     * 
     * @type {string}
     * @memberof ContactDelete
     */
    'event': ContactDeleteEventEnum;
    /**
     * 
     * @type {Array<ContactDeleteData>}
     * @memberof ContactDelete
     */
    'data': Array<ContactDeleteData>;
}

export const ContactDeleteEventEnum = {
    ContactDelete: 'contact-delete'
} as const;

export type ContactDeleteEventEnum = typeof ContactDeleteEventEnum[keyof typeof ContactDeleteEventEnum];

/**
 * 
 * @export
 * @interface ContactDeleteData
 */
export interface ContactDeleteData {
    /**
     * 
     * @type {string}
     * @memberof ContactDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface ContactInsert
 */
export interface ContactInsert {
    /**
     * 
     * @type {string}
     * @memberof ContactInsert
     */
    'event': ContactInsertEventEnum;
    /**
     * 
     * @type {Array<ContactInsertData>}
     * @memberof ContactInsert
     */
    'data': Array<ContactInsertData>;
}

export const ContactInsertEventEnum = {
    ContactInsert: 'contact-insert'
} as const;

export type ContactInsertEventEnum = typeof ContactInsertEventEnum[keyof typeof ContactInsertEventEnum];

/**
 * 
 * @export
 * @interface ContactInsertData
 */
export interface ContactInsertData {
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'cursor': string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'type': ContactInsertDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'name': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactInsertData
     */
    'platformNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof ContactInsertData
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof ContactInsertData
     */
    'tags': Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactInsertData
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactInsertData
     */
    'messagesSent': number;
    /**
     * 
     * @type {number}
     * @memberof ContactInsertData
     */
    'messagesReceived': number;
}

export const ContactInsertDataTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast'
} as const;

export type ContactInsertDataTypeEnum = typeof ContactInsertDataTypeEnum[keyof typeof ContactInsertDataTypeEnum];

/**
 * 
 * @export
 * @interface ContactUpdate
 */
export interface ContactUpdate {
    /**
     * 
     * @type {string}
     * @memberof ContactUpdate
     */
    'event': ContactUpdateEventEnum;
    /**
     * 
     * @type {Array<ContactUpdateData>}
     * @memberof ContactUpdate
     */
    'data': Array<ContactUpdateData>;
}

export const ContactUpdateEventEnum = {
    ContactUpdate: 'contact-update'
} as const;

export type ContactUpdateEventEnum = typeof ContactUpdateEventEnum[keyof typeof ContactUpdateEventEnum];

/**
 * 
 * @export
 * @interface ContactUpdateData
 */
export interface ContactUpdateData {
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'cursor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'type'?: ContactUpdateDataTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactUpdateData
     */
    'platformNames'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof ContactUpdateData
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof ContactUpdateData
     */
    'tags'?: Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactUpdateData
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ContactUpdateData
     */
    'messagesSent'?: number;
    /**
     * 
     * @type {number}
     * @memberof ContactUpdateData
     */
    'messagesReceived'?: number;
}

export const ContactUpdateDataTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast'
} as const;

export type ContactUpdateDataTypeEnum = typeof ContactUpdateDataTypeEnum[keyof typeof ContactUpdateDataTypeEnum];

/**
 * 
 * @export
 * @enum {string}
 */

export const EventName = {
    GroupUpdate: 'group-update',
    PresenceUpdate: 'presence-update',
    OrderInsert: 'order-insert',
    ActionExecute: 'action-execute',
    FewMessagesLeft: 'few-messages-left',
    StaleAccountNotification: 'stale-account-notification',
    UnreadChatsNotification: 'unread-chats-notification',
    MembershipactionInsert: 'membershipaction-insert',
    PushNotification: 'push-notification',
    ContactInsert: 'contact-insert',
    ContactUpdate: 'contact-update',
    ContactDelete: 'contact-delete',
    ChatInsert: 'chat-insert',
    ChatUpdate: 'chat-update',
    ChatDelete: 'chat-delete',
    AccountInsert: 'account-insert',
    AccountUpdate: 'account-update',
    AccountDelete: 'account-delete',
    MessageInsert: 'message-insert',
    MessageUpdate: 'message-update',
    MessageDelete: 'message-delete',
    UserInsert: 'user-insert',
    UserUpdate: 'user-update',
    UserDelete: 'user-delete',
    TeamInsert: 'team-insert',
    TeamUpdate: 'team-update',
    TeamDelete: 'team-delete',
    TeammemberInsert: 'teammember-insert',
    TeammemberUpdate: 'teammember-update',
    TeammemberDelete: 'teammember-delete',
    PlatformproductInsert: 'platformproduct-insert',
    PlatformproductUpdate: 'platformproduct-update',
    PlatformproductDelete: 'platformproduct-delete',
    TrackingInsert: 'tracking-insert',
    TrackingUpdate: 'tracking-update',
    TrackingDelete: 'tracking-delete',
    BotInsert: 'bot-insert',
    BotUpdate: 'bot-update',
    BotDelete: 'bot-delete'
} as const;

export type EventName = typeof EventName[keyof typeof EventName];


/**
 * 
 * @export
 * @interface EventSubscription
 */
export interface EventSubscription {
    /**
     * ID of the subscription
     * @type {string}
     * @memberof EventSubscription
     */
    'id': string;
    /**
     * Whether the subscription is enabled
     * @type {boolean}
     * @memberof EventSubscription
     */
    'enabled': boolean;
    /**
     * The owner id the connection
     * @type {string}
     * @memberof EventSubscription
     */
    'ownerId'?: string;
    /**
     * The User ID that created the subscription
     * @type {string}
     * @memberof EventSubscription
     */
    'userId': string;
    /**
     * An ISO formatted timestamp
     * @type {string}
     * @memberof EventSubscription
     */
    'createdAt'?: string;
    /**
     * the events to subscribe to
     * @type {Array<EventName>}
     * @memberof EventSubscription
     */
    'events': Array<EventName>;
    /**
     * the IM accounts to receive events from
     * @type {Array<string>}
     * @memberof EventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof EventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * 
     * @type {EventSubscriptionType}
     * @memberof EventSubscription
     */
    'type': EventSubscriptionType;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof EventSubscription
     */
    'url'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const EventSubscriptionType = {
    Webhook: 'webhook',
    Websocket: 'websocket'
} as const;

export type EventSubscriptionType = typeof EventSubscriptionType[keyof typeof EventSubscriptionType];


/**
 * @type EventWebhookData
 * The request body you\'ll receive in a webhook
 * @export
 */
export type EventWebhookData = AccountDelete | AccountInsert | AccountUpdate | ActionExecute | BotDelete | BotInsert | BotUpdate | ChatDelete | ChatInsert | ChatUpdate | ContactDelete | ContactInsert | ContactUpdate | FewMessagesLeft | GroupUpdate | MembershipactionInsert | MessageDelete | MessageInsert | MessageUpdate | OrderInsert | PlatformproductDelete | PlatformproductInsert | PlatformproductUpdate | PresenceUpdate | PushNotification | StaleAccountNotification | TeamDelete | TeamInsert | TeamUpdate | TeammemberDelete | TeammemberInsert | TeammemberUpdate | TrackingDelete | TrackingInsert | TrackingUpdate | UnreadChatsNotification | UserDelete | UserInsert | UserUpdate;

/**
 * 
 * @export
 * @interface FewMessagesLeft
 */
export interface FewMessagesLeft {
    /**
     * 
     * @type {string}
     * @memberof FewMessagesLeft
     */
    'event': FewMessagesLeftEventEnum;
    /**
     * 
     * @type {Array<FewMessagesLeftData>}
     * @memberof FewMessagesLeft
     */
    'data': Array<FewMessagesLeftData>;
}

export const FewMessagesLeftEventEnum = {
    FewMessagesLeft: 'few-messages-left'
} as const;

export type FewMessagesLeftEventEnum = typeof FewMessagesLeftEventEnum[keyof typeof FewMessagesLeftEventEnum];

/**
 * 
 * @export
 * @interface FewMessagesLeftData
 */
export interface FewMessagesLeftData {
    /**
     * 
     * @type {number}
     * @memberof FewMessagesLeftData
     */
    'messagesLeft': number;
}
/**
 * 
 * @export
 * @interface GroupUpdate
 */
export interface GroupUpdate {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdate
     */
    'event': GroupUpdateEventEnum;
    /**
     * 
     * @type {Array<GroupUpdateData>}
     * @memberof GroupUpdate
     */
    'data': Array<GroupUpdateData>;
}

export const GroupUpdateEventEnum = {
    GroupUpdate: 'group-update'
} as const;

export type GroupUpdateEventEnum = typeof GroupUpdateEventEnum[keyof typeof GroupUpdateEventEnum];

/**
 * 
 * @export
 * @interface GroupUpdateData
 */
export interface GroupUpdateData {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'ownerId'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwner}
     * @memberof GroupUpdateData
     */
    'owner'?: GroupUpdateDataOwner;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateData
     */
    'description'?: string | null;
    /**
     * is set when the group only allows admins to change group settings
     * @type {boolean}
     * @memberof GroupUpdateData
     */
    'restrict'?: boolean;
    /**
     * is set when the group only allows admins to write messages
     * @type {boolean}
     * @memberof GroupUpdateData
     */
    'announce'?: boolean;
    /**
     * 
     * @type {Array<GroupUpdateDataParticipantsInner>}
     * @memberof GroupUpdateData
     */
    'participants'?: Array<GroupUpdateDataParticipantsInner>;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwner
 */
export interface GroupUpdateDataOwner {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'cursor': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'type': GroupUpdateDataOwnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'name': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupUpdateDataOwner
     */
    'platformNames': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'phoneNumber': string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'email'?: string | null;
    /**
     * 
     * @type {GroupUpdateDataOwnerImg}
     * @memberof GroupUpdateDataOwner
     */
    'img'?: GroupUpdateDataOwnerImg | null;
    /**
     * 
     * @type {Array<GroupUpdateDataOwnerTagsInner>}
     * @memberof GroupUpdateDataOwner
     */
    'tags': Array<GroupUpdateDataOwnerTagsInner>;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assignee'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assigner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwner
     */
    'assignedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof GroupUpdateDataOwner
     */
    'messagesSent': number;
    /**
     * 
     * @type {number}
     * @memberof GroupUpdateDataOwner
     */
    'messagesReceived': number;
}

export const GroupUpdateDataOwnerTypeEnum = {
    Individual: 'individual',
    Group: 'group',
    Channel: 'channel',
    Broadcast: 'broadcast'
} as const;

export type GroupUpdateDataOwnerTypeEnum = typeof GroupUpdateDataOwnerTypeEnum[keyof typeof GroupUpdateDataOwnerTypeEnum];

/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerImg
 */
export interface GroupUpdateDataOwnerImg {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'fullUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerImg
     */
    'fetchedAt'?: string;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInner
 */
export interface GroupUpdateDataOwnerTagsInner {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'value'?: string | null;
    /**
     * used in events to denote that the tag has been removed
     * @type {boolean}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'remove'?: boolean;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'addedMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInner
     */
    'updatedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'value'?: string | null;
    /**
     * used in events to denote that the tag has been removed
     * @type {boolean}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf
     */
    'remove'?: boolean;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf1
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf1 {
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1
     */
    'addedMetadata': GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
    /**
     * 
     * @type {GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1
     */
    'updatedMetadata'?: GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
 */
export interface GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata {
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
     */
    'doneAt': string;
    /**
     * The user ID of the user on ChatDaddy
     * @type {string}
     * @memberof GroupUpdateDataOwnerTagsInnerAllOf1AddedMetadata
     */
    'doneBy': string;
}
/**
 * 
 * @export
 * @interface GroupUpdateDataParticipantsInner
 */
export interface GroupUpdateDataParticipantsInner {
    /**
     * 
     * @type {GroupUpdateDataOwner}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'contact': GroupUpdateDataOwner;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'contactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUpdateDataParticipantsInner
     */
    'admin'?: GroupUpdateDataParticipantsInnerAdminEnum;
}

export const GroupUpdateDataParticipantsInnerAdminEnum = {
    Admin: 'admin',
    SuperAdmin: 'super-admin'
} as const;

export type GroupUpdateDataParticipantsInnerAdminEnum = typeof GroupUpdateDataParticipantsInnerAdminEnum[keyof typeof GroupUpdateDataParticipantsInnerAdminEnum];

/**
 * 
 * @export
 * @interface MembershipActionInsertData
 */
export interface MembershipActionInsertData {
    /**
     * The id of the pending membership action
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'id': number;
    /**
     * The id of the membership
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'membershipId': number;
    /**
     * 
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'actionType': MembershipActionInsertDataActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'approvalState': MembershipActionInsertDataApprovalStateEnum;
    /**
     * The number of points to add or remove
     * @type {number}
     * @memberof MembershipActionInsertData
     */
    'amount': number;
    /**
     * The date and time the pending membership action was created
     * @type {string}
     * @memberof MembershipActionInsertData
     */
    'timestamp': string;
}

export const MembershipActionInsertDataActionTypeEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;

export type MembershipActionInsertDataActionTypeEnum = typeof MembershipActionInsertDataActionTypeEnum[keyof typeof MembershipActionInsertDataActionTypeEnum];
export const MembershipActionInsertDataApprovalStateEnum = {
    Approved: 'approved',
    Rejected: 'rejected',
    Pending: 'pending'
} as const;

export type MembershipActionInsertDataApprovalStateEnum = typeof MembershipActionInsertDataApprovalStateEnum[keyof typeof MembershipActionInsertDataApprovalStateEnum];

/**
 * 
 * @export
 * @interface MembershipactionInsert
 */
export interface MembershipactionInsert {
    /**
     * 
     * @type {string}
     * @memberof MembershipactionInsert
     */
    'event': MembershipactionInsertEventEnum;
    /**
     * 
     * @type {Array<MembershipactionInsertData>}
     * @memberof MembershipactionInsert
     */
    'data': Array<MembershipactionInsertData>;
}

export const MembershipactionInsertEventEnum = {
    MembershipactionInsert: 'membershipaction-insert'
} as const;

export type MembershipactionInsertEventEnum = typeof MembershipactionInsertEventEnum[keyof typeof MembershipactionInsertEventEnum];

/**
 * 
 * @export
 * @interface MembershipactionInsertData
 */
export interface MembershipactionInsertData {
    /**
     * The id of the pending membership action
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'id': number;
    /**
     * The id of the membership
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'membershipId': number;
    /**
     * The contactId of the membership
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'contactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'actionType': MembershipactionInsertDataActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'approvalState': MembershipactionInsertDataApprovalStateEnum;
    /**
     * The number of points to add or remove
     * @type {number}
     * @memberof MembershipactionInsertData
     */
    'amount': number;
    /**
     * The date and time the pending membership action was created
     * @type {string}
     * @memberof MembershipactionInsertData
     */
    'timestamp': string;
}

export const MembershipactionInsertDataActionTypeEnum = {
    Add: 'add',
    Remove: 'remove'
} as const;

export type MembershipactionInsertDataActionTypeEnum = typeof MembershipactionInsertDataActionTypeEnum[keyof typeof MembershipactionInsertDataActionTypeEnum];
export const MembershipactionInsertDataApprovalStateEnum = {
    Approved: 'approved',
    Rejected: 'rejected',
    Pending: 'pending'
} as const;

export type MembershipactionInsertDataApprovalStateEnum = typeof MembershipactionInsertDataApprovalStateEnum[keyof typeof MembershipactionInsertDataApprovalStateEnum];

/**
 * 
 * @export
 * @interface MessageDelete
 */
export interface MessageDelete {
    /**
     * 
     * @type {string}
     * @memberof MessageDelete
     */
    'event': MessageDeleteEventEnum;
    /**
     * 
     * @type {Array<MessageDeleteData>}
     * @memberof MessageDelete
     */
    'data': Array<MessageDeleteData>;
}

export const MessageDeleteEventEnum = {
    MessageDelete: 'message-delete'
} as const;

export type MessageDeleteEventEnum = typeof MessageDeleteEventEnum[keyof typeof MessageDeleteEventEnum];

/**
 * 
 * @export
 * @interface MessageDeleteData
 */
export interface MessageDeleteData {
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MessageInsert
 */
export interface MessageInsert {
    /**
     * 
     * @type {string}
     * @memberof MessageInsert
     */
    'event': MessageInsertEventEnum;
    /**
     * 
     * @type {Array<MessageInsertData>}
     * @memberof MessageInsert
     */
    'data': Array<MessageInsertData>;
}

export const MessageInsertEventEnum = {
    MessageInsert: 'message-insert'
} as const;

export type MessageInsertEventEnum = typeof MessageInsertEventEnum[keyof typeof MessageInsertEventEnum];

/**
 * 
 * @export
 * @interface MessageInsertData
 */
export interface MessageInsertData {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'fromMe': boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'senderContactId'?: string | null;
    /**
     * 
     * @type {MessageInsertDataSender}
     * @memberof MessageInsertData
     */
    'sender'?: MessageInsertDataSender | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'status'?: MessageInsertDataStatusEnum;
    /**
     * 
     * @type {MessageInsertDataError}
     * @memberof MessageInsertData
     */
    'error'?: MessageInsertDataError | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'resolvedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'resolvedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertData
     */
    'revision'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'editedAt'?: string | null;
    /**
     * 
     * @type {MessageInsertDataMiscOptions}
     * @memberof MessageInsertData
     */
    'miscOptions'?: MessageInsertDataMiscOptions;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertData
     */
    'text'?: string | null;
    /**
     * 
     * @type {MessageInsertDataQuoted}
     * @memberof MessageInsertData
     */
    'quoted'?: MessageInsertDataQuoted | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertData
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAction}
     * @memberof MessageInsertData
     */
    'action'?: MessageInsertDataAction | null;
    /**
     * 
     * @type {Array<MessageInsertDataAttachmentsInner>}
     * @memberof MessageInsertData
     */
    'attachments'?: Array<MessageInsertDataAttachmentsInner>;
    /**
     * 
     * @type {Array<MessageInsertDataButtonsInner>}
     * @memberof MessageInsertData
     */
    'buttons'?: Array<MessageInsertDataButtonsInner> | null;
    /**
     * 
     * @type {MessageInsertDataPoll}
     * @memberof MessageInsertData
     */
    'poll'?: MessageInsertDataPoll;
    /**
     * 
     * @type {MessageInsertDataList}
     * @memberof MessageInsertData
     */
    'list'?: MessageInsertDataList;
    /**
     * 
     * @type {Array<MessageInsertDataProductsInner>}
     * @memberof MessageInsertData
     */
    'products'?: Array<MessageInsertDataProductsInner> | null;
    /**
     * 
     * @type {MessageInsertDataOrder}
     * @memberof MessageInsertData
     */
    'order'?: MessageInsertDataOrder | null;
    /**
     * 
     * @type {MessageInsertDataLinkPreview}
     * @memberof MessageInsertData
     */
    'linkPreview'?: MessageInsertDataLinkPreview;
    /**
     * 
     * @type {Array<MessageInsertDataReactionsInner>}
     * @memberof MessageInsertData
     */
    'reactions'?: Array<MessageInsertDataReactionsInner> | null;
}

export const MessageInsertDataStatusEnum = {
    Error: 'error',
    Pending: 'pending',
    Note: 'note',
    Sent: 'sent',
    Delivered: 'delivered',
    Read: 'read',
    Cancelled: 'cancelled'
} as const;

export type MessageInsertDataStatusEnum = typeof MessageInsertDataStatusEnum[keyof typeof MessageInsertDataStatusEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAction
 */
export interface MessageInsertDataAction {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAction
     */
    'type': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataAction
     */
    'parameters'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInner
 */
export interface MessageInsertDataAttachmentsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'type': MessageInsertDataAttachmentsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'mimetype': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'url': string;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInnerLocation}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'location'?: MessageInsertDataAttachmentsInnerLocation;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'jpegThumbnail'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'seconds'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'pttAudio'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'filename'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'isGif'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInnerDecryption}
     * @memberof MessageInsertDataAttachmentsInner
     */
    'decryption'?: MessageInsertDataAttachmentsInnerDecryption;
}

export const MessageInsertDataAttachmentsInnerTypeEnum = {
    Image: 'image',
    Video: 'video',
    Contact: 'contact',
    Sticker: 'sticker',
    Audio: 'audio',
    Document: 'document',
    Location: 'location'
} as const;

export type MessageInsertDataAttachmentsInnerTypeEnum = typeof MessageInsertDataAttachmentsInnerTypeEnum[keyof typeof MessageInsertDataAttachmentsInnerTypeEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInnerDecryption
 */
export interface MessageInsertDataAttachmentsInnerDecryption {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MessageInsertDataAttachmentsInnerDecryption
     */
    'keys'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataAttachmentsInnerDecryption
     */
    'algorithm': MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum;
}

export const MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum = {
    Aes256Cbc: 'aes-256-cbc'
} as const;

export type MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum = typeof MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum[keyof typeof MessageInsertDataAttachmentsInnerDecryptionAlgorithmEnum];

/**
 * 
 * @export
 * @interface MessageInsertDataAttachmentsInnerLocation
 */
export interface MessageInsertDataAttachmentsInnerLocation {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInnerLocation
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataAttachmentsInnerLocation
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataButtonsInner
 */
export interface MessageInsertDataButtonsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'text': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataButtonsInner
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataError
 */
export interface MessageInsertDataError {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataError
     */
    'retries'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataLinkPreview
 */
export interface MessageInsertDataLinkPreview {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'jpegThumbnail'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataLinkPreview
     */
    'matchedText'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataList
 */
export interface MessageInsertDataList {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataList
     */
    'title'?: string;
    /**
     * 
     * @type {Array<MessageInsertDataListSectionsInner>}
     * @memberof MessageInsertDataList
     */
    'sections': Array<MessageInsertDataListSectionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataList
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataListSectionsInner
 */
export interface MessageInsertDataListSectionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInner
     */
    'title': string;
    /**
     * 
     * @type {Array<MessageInsertDataListSectionsInnerOptionsInner>}
     * @memberof MessageInsertDataListSectionsInner
     */
    'options': Array<MessageInsertDataListSectionsInnerOptionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataListSectionsInner
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataListSectionsInnerOptionsInner
 */
export interface MessageInsertDataListSectionsInnerOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInnerOptionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataListSectionsInnerOptionsInner
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataMiscOptions
 */
export interface MessageInsertDataMiscOptions {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'originalId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'templateId'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MessageInsertDataMiscOptions
     */
    'templateParams'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'withTyping'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataMiscOptions
     */
    'forwardCount'?: number;
    /**
     * 
     * @type {MessageInsertDataMiscOptionsForwarded}
     * @memberof MessageInsertDataMiscOptions
     */
    'forwarded'?: MessageInsertDataMiscOptionsForwarded;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'randomizeMessage'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'buttonReplyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptions
     */
    'listReplyId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataMiscOptions
     */
    'pollReplyOptions'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof MessageInsertDataMiscOptions
     */
    'cancelIfReplyReceived'?: boolean;
}
/**
 * 
 * @export
 * @interface MessageInsertDataMiscOptionsForwarded
 */
export interface MessageInsertDataMiscOptionsForwarded {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptionsForwarded
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataMiscOptionsForwarded
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataOrder
 */
export interface MessageInsertDataOrder {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'jpegThumbnail'?: string;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataOrder
     */
    'itemCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'sellerId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrder
     */
    'token': string;
    /**
     * 
     * @type {MessageInsertDataOrderTotal}
     * @memberof MessageInsertDataOrder
     */
    'total': MessageInsertDataOrderTotal;
}
/**
 * 
 * @export
 * @interface MessageInsertDataOrderTotal
 */
export interface MessageInsertDataOrderTotal {
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataOrderTotal
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataOrderTotal
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataPoll
 */
export interface MessageInsertDataPoll {
    /**
     * 
     * @type {Array<MessageInsertDataPollOptionsInner>}
     * @memberof MessageInsertDataPoll
     */
    'options': Array<MessageInsertDataPollOptionsInner>;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataPoll
     */
    'maxSelections'?: number;
}
/**
 * 
 * @export
 * @interface MessageInsertDataPollOptionsInner
 */
export interface MessageInsertDataPollOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataPollOptionsInner
     */
    'text': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageInsertDataPollOptionsInner
     */
    'voters'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MessageInsertDataProductsInner
 */
export interface MessageInsertDataProductsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInner
     */
    'accountId'?: string;
    /**
     * 
     * @type {MessageInsertDataProductsInnerDetails}
     * @memberof MessageInsertDataProductsInner
     */
    'details'?: MessageInsertDataProductsInnerDetails;
}
/**
 * 
 * @export
 * @interface MessageInsertDataProductsInnerDetails
 */
export interface MessageInsertDataProductsInnerDetails {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'currencyCode': string;
    /**
     * 
     * @type {number}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'price1000': number;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'url'?: string;
    /**
     * 
     * @type {MessageInsertDataAttachmentsInner}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'image': MessageInsertDataAttachmentsInner;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataProductsInnerDetails
     */
    'businessOwnerId'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataQuoted
 */
export interface MessageInsertDataQuoted {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'senderContactId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataQuoted
     */
    'jpegThumbnail'?: string | null;
}
/**
 * 
 * @export
 * @interface MessageInsertDataReactionsInner
 */
export interface MessageInsertDataReactionsInner {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'reaction': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'fromId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataReactionsInner
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface MessageInsertDataSender
 */
export interface MessageInsertDataSender {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSender
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSender
     */
    'createdAt'?: string;
    /**
     * 
     * @type {MessageInsertDataSenderContext}
     * @memberof MessageInsertDataSender
     */
    'context'?: MessageInsertDataSenderContext;
}
/**
 * 
 * @export
 * @interface MessageInsertDataSenderContext
 */
export interface MessageInsertDataSenderContext {
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSenderContext
     */
    'type': MessageInsertDataSenderContextTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSenderContext
     */
    'objectId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageInsertDataSenderContext
     */
    'objectName'?: string;
}

export const MessageInsertDataSenderContextTypeEnum = {
    KeywordReply: 'keyword-reply',
    DefaultReply: 'default-reply',
    Campaigns: 'campaigns',
    Notifications: 'notifications',
    Bot: 'bot',
    AiChatbot: 'ai-chatbot'
} as const;

export type MessageInsertDataSenderContextTypeEnum = typeof MessageInsertDataSenderContextTypeEnum[keyof typeof MessageInsertDataSenderContextTypeEnum];

/**
 * 
 * @export
 * @interface MessageUpdate
 */
export interface MessageUpdate {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'event': MessageUpdateEventEnum;
    /**
     * 
     * @type {Array<MessageUpdateData>}
     * @memberof MessageUpdate
     */
    'data': Array<MessageUpdateData>;
}

export const MessageUpdateEventEnum = {
    MessageUpdate: 'message-update'
} as const;

export type MessageUpdateEventEnum = typeof MessageUpdateEventEnum[keyof typeof MessageUpdateEventEnum];

/**
 * 
 * @export
 * @interface MessageUpdateData
 */
export interface MessageUpdateData {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'chatId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'fromMe'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'senderContactId'?: string | null;
    /**
     * 
     * @type {MessageInsertDataSender}
     * @memberof MessageUpdateData
     */
    'sender'?: MessageInsertDataSender | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'status'?: MessageUpdateDataStatusEnum;
    /**
     * 
     * @type {MessageInsertDataError}
     * @memberof MessageUpdateData
     */
    'error'?: MessageInsertDataError | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'resolvedBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'resolvedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MessageUpdateData
     */
    'revision'?: number;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'editedAt'?: string | null;
    /**
     * 
     * @type {MessageInsertDataMiscOptions}
     * @memberof MessageUpdateData
     */
    'miscOptions'?: MessageInsertDataMiscOptions;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageUpdateData
     */
    'mentions'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateData
     */
    'text'?: string | null;
    /**
     * 
     * @type {MessageInsertDataQuoted}
     * @memberof MessageUpdateData
     */
    'quoted'?: MessageInsertDataQuoted | null;
    /**
     * 
     * @type {boolean}
     * @memberof MessageUpdateData
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {MessageInsertDataAction}
     * @memberof MessageUpdateData
     */
    'action'?: MessageInsertDataAction | null;
    /**
     * 
     * @type {Array<MessageInsertDataAttachmentsInner>}
     * @memberof MessageUpdateData
     */
    'attachments'?: Array<MessageInsertDataAttachmentsInner>;
    /**
     * 
     * @type {Array<MessageInsertDataButtonsInner>}
     * @memberof MessageUpdateData
     */
    'buttons'?: Array<MessageInsertDataButtonsInner> | null;
    /**
     * 
     * @type {MessageInsertDataPoll}
     * @memberof MessageUpdateData
     */
    'poll'?: MessageInsertDataPoll;
    /**
     * 
     * @type {MessageInsertDataList}
     * @memberof MessageUpdateData
     */
    'list'?: MessageInsertDataList;
    /**
     * 
     * @type {Array<MessageInsertDataProductsInner>}
     * @memberof MessageUpdateData
     */
    'products'?: Array<MessageInsertDataProductsInner> | null;
    /**
     * 
     * @type {MessageInsertDataOrder}
     * @memberof MessageUpdateData
     */
    'order'?: MessageInsertDataOrder | null;
    /**
     * 
     * @type {MessageInsertDataLinkPreview}
     * @memberof MessageUpdateData
     */
    'linkPreview'?: MessageInsertDataLinkPreview;
    /**
     * 
     * @type {Array<MessageInsertDataReactionsInner>}
     * @memberof MessageUpdateData
     */
    'reactions'?: Array<MessageInsertDataReactionsInner> | null;
}

export const MessageUpdateDataStatusEnum = {
    Error: 'error',
    Pending: 'pending',
    Note: 'note',
    Sent: 'sent',
    Delivered: 'delivered',
    Read: 'read',
    Cancelled: 'cancelled'
} as const;

export type MessageUpdateDataStatusEnum = typeof MessageUpdateDataStatusEnum[keyof typeof MessageUpdateDataStatusEnum];

/**
 * 
 * @export
 * @interface OrderInsert
 */
export interface OrderInsert {
    /**
     * 
     * @type {string}
     * @memberof OrderInsert
     */
    'event': OrderInsertEventEnum;
    /**
     * 
     * @type {Array<OrderInsertData>}
     * @memberof OrderInsert
     */
    'data': Array<OrderInsertData>;
}

export const OrderInsertEventEnum = {
    OrderInsert: 'order-insert'
} as const;

export type OrderInsertEventEnum = typeof OrderInsertEventEnum[keyof typeof OrderInsertEventEnum];

/**
 * - A data point created via the \"dataPatch\" operation - this signifies a change in an order, or the creation of a new order 
 * @export
 * @interface OrderInsertData
 */
export interface OrderInsertData {
    /**
     * Unique identifier for the data point
     * @type {number}
     * @memberof OrderInsertData
     */
    'id': number;
    /**
     * Unique identifier for the order, provided by the \"tracking\" its from
     * @type {string}
     * @memberof OrderInsertData
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof OrderInsertData
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {OrderInsertDataPhoneNumber}
     * @memberof OrderInsertData
     */
    'phoneNumber': OrderInsertDataPhoneNumber;
    /**
     * 
     * @type {OrderInsertDataWaResponse}
     * @memberof OrderInsertData
     */
    'waResponse': OrderInsertDataWaResponse;
    /**
     * The trigger that captured this data point for message sending. If null, it means that no trigger captured this data point
     * @type {number}
     * @memberof OrderInsertData
     */
    'triggerId': number | null;
    /**
     * The tracking that captured this data point for message sending
     * @type {number}
     * @memberof OrderInsertData
     */
    'trackingId'?: number;
    /**
     * The status of the data point. - \"sent\" => data point has been sent to the bot service, either successfully or not - \"pending\" => data point is waiting to be sent to the bot service. If - \"cancelled\" => data point has been cancelled, and will not be sent to the bot service. this could be because no trigger was found, or the trigger was disabled
     * @type {string}
     * @memberof OrderInsertData
     */
    'status': OrderInsertDataStatusEnum;
    /**
     * Whether this data point is a test data point or not. Test data points are created by the \"triggerTest\" operation
     * @type {boolean}
     * @memberof OrderInsertData
     */
    'isTest': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderInsertData
     */
    'datetime': string;
    /**
     * The params that were sent by the integration when the data point was created
     * @type {{ [key: string]: any; }}
     * @memberof OrderInsertData
     */
    'params': { [key: string]: any; };
}

export const OrderInsertDataStatusEnum = {
    Sent: 'sent',
    Pending: 'pending',
    Cancelled: 'cancelled'
} as const;

export type OrderInsertDataStatusEnum = typeof OrderInsertDataStatusEnum[keyof typeof OrderInsertDataStatusEnum];

/**
 * @type OrderInsertDataPhoneNumber
 * Phone number to be sent to
 * @export
 */
export type OrderInsertDataPhoneNumber = number | object | string;

/**
 * the response received from the bots service. \"waResponse\" is a bit of a misnomer now, but it\'s a legacy name as we used to only support data from WhatsApp 
 * @export
 * @interface OrderInsertDataWaResponse
 */
export interface OrderInsertDataWaResponse {
    /**
     * the response code
     * @type {number}
     * @memberof OrderInsertDataWaResponse
     */
    'code'?: number;
    /**
     * the body received
     * @type {object}
     * @memberof OrderInsertDataWaResponse
     */
    'body'?: object;
}
/**
 * 
 * @export
 * @interface PlatformproductDelete
 */
export interface PlatformproductDelete {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDelete
     */
    'event': PlatformproductDeleteEventEnum;
    /**
     * 
     * @type {Array<PlatformproductDeleteData>}
     * @memberof PlatformproductDelete
     */
    'data': Array<PlatformproductDeleteData>;
}

export const PlatformproductDeleteEventEnum = {
    PlatformproductDelete: 'platformproduct-delete'
} as const;

export type PlatformproductDeleteEventEnum = typeof PlatformproductDeleteEventEnum[keyof typeof PlatformproductDeleteEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductDeleteData
 */
export interface PlatformproductDeleteData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductDeleteData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface PlatformproductInsert
 */
export interface PlatformproductInsert {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsert
     */
    'event': PlatformproductInsertEventEnum;
    /**
     * 
     * @type {Array<PlatformproductInsertData>}
     * @memberof PlatformproductInsert
     */
    'data': Array<PlatformproductInsertData>;
}

export const PlatformproductInsertEventEnum = {
    PlatformproductInsert: 'platformproduct-insert'
} as const;

export type PlatformproductInsertEventEnum = typeof PlatformproductInsertEventEnum[keyof typeof PlatformproductInsertEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductInsertData
 */
export interface PlatformproductInsertData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'price': number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertData
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'currency': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductInsertData
     */
    'isHidden': boolean;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductInsertData
     */
    'imageUrls': { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductInsertData
     */
    'reviewStatus': { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'availability'?: PlatformproductInsertDataAvailabilityEnum;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'syncStatus': PlatformproductInsertDataSyncStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductInsertData
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {PlatformproductInsertDataError}
     * @memberof PlatformproductInsertData
     */
    'error'?: PlatformproductInsertDataError;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertData
     */
    'cursor'?: string;
}

export const PlatformproductInsertDataAvailabilityEnum = {
    InStock: 'in-stock'
} as const;

export type PlatformproductInsertDataAvailabilityEnum = typeof PlatformproductInsertDataAvailabilityEnum[keyof typeof PlatformproductInsertDataAvailabilityEnum];
export const PlatformproductInsertDataSyncStatusEnum = {
    Synced: 'synced',
    PendingCreate: 'pendingCreate',
    PendingUpdate: 'pendingUpdate',
    PendingDelete: 'pendingDelete'
} as const;

export type PlatformproductInsertDataSyncStatusEnum = typeof PlatformproductInsertDataSyncStatusEnum[keyof typeof PlatformproductInsertDataSyncStatusEnum];

/**
 * 
 * @export
 * @interface PlatformproductInsertDataError
 */
export interface PlatformproductInsertDataError {
    /**
     * 
     * @type {number}
     * @memberof PlatformproductInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertDataError
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductInsertDataError
     */
    'message': string;
    /**
     * 
     * @type {object}
     * @memberof PlatformproductInsertDataError
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface PlatformproductUpdate
 */
export interface PlatformproductUpdate {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdate
     */
    'event': PlatformproductUpdateEventEnum;
    /**
     * 
     * @type {Array<PlatformproductUpdateData>}
     * @memberof PlatformproductUpdate
     */
    'data': Array<PlatformproductUpdateData>;
}

export const PlatformproductUpdateEventEnum = {
    PlatformproductUpdate: 'platformproduct-update'
} as const;

export type PlatformproductUpdateEventEnum = typeof PlatformproductUpdateEventEnum[keyof typeof PlatformproductUpdateEventEnum];

/**
 * 
 * @export
 * @interface PlatformproductUpdateData
 */
export interface PlatformproductUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'retailerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'price'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'stock'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformproductUpdateData
     */
    'totalStockSold'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'currency'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductUpdateData
     */
    'isHidden'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductUpdateData
     */
    'imageUrls'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlatformproductUpdateData
     */
    'reviewStatus'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'availability'?: PlatformproductUpdateDataAvailabilityEnum;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'syncStatus'?: PlatformproductUpdateDataSyncStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformproductUpdateData
     */
    'isSyncing'?: boolean;
    /**
     * 
     * @type {PlatformproductInsertDataError}
     * @memberof PlatformproductUpdateData
     */
    'error'?: PlatformproductInsertDataError;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformproductUpdateData
     */
    'cursor'?: string;
}

export const PlatformproductUpdateDataAvailabilityEnum = {
    InStock: 'in-stock'
} as const;

export type PlatformproductUpdateDataAvailabilityEnum = typeof PlatformproductUpdateDataAvailabilityEnum[keyof typeof PlatformproductUpdateDataAvailabilityEnum];
export const PlatformproductUpdateDataSyncStatusEnum = {
    Synced: 'synced',
    PendingCreate: 'pendingCreate',
    PendingUpdate: 'pendingUpdate',
    PendingDelete: 'pendingDelete'
} as const;

export type PlatformproductUpdateDataSyncStatusEnum = typeof PlatformproductUpdateDataSyncStatusEnum[keyof typeof PlatformproductUpdateDataSyncStatusEnum];

/**
 * 
 * @export
 * @interface PostEventSubscription
 */
export interface PostEventSubscription {
    /**
     * whether the subscription is enabled
     * @type {boolean}
     * @memberof PostEventSubscription
     */
    'enabled': boolean;
    /**
     * the events to listen for
     * @type {Array<EventName>}
     * @memberof PostEventSubscription
     */
    'events'?: Array<EventName>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostEventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * Optionally specify ajv schema object, if validation of data fails -- the subscription will not fire
     * @type {{ [key: string]: any; }}
     * @memberof PostEventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof PostEventSubscription
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PresenceUpdate
 */
export interface PresenceUpdate {
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdate
     */
    'event': PresenceUpdateEventEnum;
    /**
     * 
     * @type {Array<PresenceUpdateData>}
     * @memberof PresenceUpdate
     */
    'data': Array<PresenceUpdateData>;
}

export const PresenceUpdateEventEnum = {
    PresenceUpdate: 'presence-update'
} as const;

export type PresenceUpdateEventEnum = typeof PresenceUpdateEventEnum[keyof typeof PresenceUpdateEventEnum];

/**
 * 
 * @export
 * @interface PresenceUpdateData
 */
export interface PresenceUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'contactId'?: string;
    /**
     * if a known team member has this presence
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenceUpdateData
     */
    'type'?: PresenceUpdateDataTypeEnum;
}

export const PresenceUpdateDataTypeEnum = {
    Available: 'available',
    Unavailable: 'unavailable',
    Typing: 'typing',
    StoppedTyping: 'stoppedTyping'
} as const;

export type PresenceUpdateDataTypeEnum = typeof PresenceUpdateDataTypeEnum[keyof typeof PresenceUpdateDataTypeEnum];

/**
 * 
 * @export
 * @interface PurchasedetailDeleteData
 */
export interface PurchasedetailDeleteData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailDeleteData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailDeleteData
     */
    'teamId': string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertData
 */
export interface PurchasedetailInsertData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'productId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'expiry'?: string;
    /**
     * 
     * @type {PurchasedetailInsertDataPrice}
     * @memberof PurchasedetailInsertData
     */
    'price': PurchasedetailInsertDataPrice;
    /**
     * 
     * @type {PurchasedetailInsertDataTrial}
     * @memberof PurchasedetailInsertData
     */
    'trial'?: PurchasedetailInsertDataTrial | null;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertData
     */
    'status'?: PurchasedetailInsertDataStatusEnum;
    /**
     * 
     * @type {PurchasedetailInsertDataStripe}
     * @memberof PurchasedetailInsertData
     */
    'stripe'?: PurchasedetailInsertDataStripe | null;
}

export const PurchasedetailInsertDataStatusEnum = {
    Paid: 'paid',
    Cancelled: 'cancelled',
    PendingPayment: 'pending-payment',
    Voided: 'voided'
} as const;

export type PurchasedetailInsertDataStatusEnum = typeof PurchasedetailInsertDataStatusEnum[keyof typeof PurchasedetailInsertDataStatusEnum];

/**
 * 
 * @export
 * @interface PurchasedetailInsertDataPrice
 */
export interface PurchasedetailInsertDataPrice {
    /**
     * 
     * @type {number}
     * @memberof PurchasedetailInsertDataPrice
     */
    'value': number;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataPrice
     */
    'currency': string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertDataStripe
 */
export interface PurchasedetailInsertDataStripe {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'invoiceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'subscriptionId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataStripe
     */
    'subscriptionItemId'?: string;
}
/**
 * 
 * @export
 * @interface PurchasedetailInsertDataTrial
 */
export interface PurchasedetailInsertDataTrial {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailInsertDataTrial
     */
    'expiry'?: string;
}
/**
 * 
 * @export
 * @interface PurchasedetailUpdateData
 */
export interface PurchasedetailUpdateData {
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'expiry'?: string;
    /**
     * 
     * @type {PurchasedetailInsertDataPrice}
     * @memberof PurchasedetailUpdateData
     */
    'price'?: PurchasedetailInsertDataPrice;
    /**
     * 
     * @type {PurchasedetailInsertDataTrial}
     * @memberof PurchasedetailUpdateData
     */
    'trial'?: PurchasedetailInsertDataTrial | null;
    /**
     * 
     * @type {string}
     * @memberof PurchasedetailUpdateData
     */
    'status'?: PurchasedetailUpdateDataStatusEnum;
    /**
     * 
     * @type {PurchasedetailInsertDataStripe}
     * @memberof PurchasedetailUpdateData
     */
    'stripe'?: PurchasedetailInsertDataStripe | null;
}

export const PurchasedetailUpdateDataStatusEnum = {
    Paid: 'paid',
    Cancelled: 'cancelled',
    PendingPayment: 'pending-payment',
    Voided: 'voided'
} as const;

export type PurchasedetailUpdateDataStatusEnum = typeof PurchasedetailUpdateDataStatusEnum[keyof typeof PurchasedetailUpdateDataStatusEnum];

/**
 * 
 * @export
 * @interface PushNotification
 */
export interface PushNotification {
    /**
     * 
     * @type {string}
     * @memberof PushNotification
     */
    'event': PushNotificationEventEnum;
    /**
     * 
     * @type {Array<PushNotificationData>}
     * @memberof PushNotification
     */
    'data': Array<PushNotificationData>;
}

export const PushNotificationEventEnum = {
    PushNotification: 'push-notification'
} as const;

export type PushNotificationEventEnum = typeof PushNotificationEventEnum[keyof typeof PushNotificationEventEnum];

/**
 * 
 * @export
 * @interface PushNotificationData
 */
export interface PushNotificationData {
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'text': string;
    /**
     * When true, the notification is only shown if the user is online
     * @type {boolean}
     * @memberof PushNotificationData
     */
    'onlineOnly'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PushNotificationData
     */
    'teamId': string;
    /**
     * The path to open when the notification is clicked
     * @type {string}
     * @memberof PushNotificationData
     */
    'path'?: string;
    /**
     * The image to show in the notification
     * @type {string}
     * @memberof PushNotificationData
     */
    'imgUrl'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PushNotificationData
     */
    'context'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface StaleAccountNotification
 */
export interface StaleAccountNotification {
    /**
     * 
     * @type {string}
     * @memberof StaleAccountNotification
     */
    'event': StaleAccountNotificationEventEnum;
    /**
     * 
     * @type {Array<StaleAccountNotificationData>}
     * @memberof StaleAccountNotification
     */
    'data': Array<StaleAccountNotificationData>;
}

export const StaleAccountNotificationEventEnum = {
    StaleAccountNotification: 'stale-account-notification'
} as const;

export type StaleAccountNotificationEventEnum = typeof StaleAccountNotificationEventEnum[keyof typeof StaleAccountNotificationEventEnum];

/**
 * 
 * @export
 * @interface StaleAccountNotificationData
 */
export interface StaleAccountNotificationData {
    /**
     * 
     * @type {string}
     * @memberof StaleAccountNotificationData
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface SubscriptionsDelete200Response
 */
export interface SubscriptionsDelete200Response {
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionsDelete200Response
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface SubscriptionsGet200Response
 */
export interface SubscriptionsGet200Response {
    /**
     * 
     * @type {Array<EventSubscription>}
     * @memberof SubscriptionsGet200Response
     */
    'subscriptions': Array<EventSubscription>;
}
/**
 * 
 * @export
 * @interface TeamDelete
 */
export interface TeamDelete {
    /**
     * 
     * @type {string}
     * @memberof TeamDelete
     */
    'event': TeamDeleteEventEnum;
    /**
     * 
     * @type {Array<TeamDeleteData>}
     * @memberof TeamDelete
     */
    'data': Array<TeamDeleteData>;
}

export const TeamDeleteEventEnum = {
    TeamDelete: 'team-delete'
} as const;

export type TeamDeleteEventEnum = typeof TeamDeleteEventEnum[keyof typeof TeamDeleteEventEnum];

/**
 * 
 * @export
 * @interface TeamDeleteData
 */
export interface TeamDeleteData {
    /**
     * 
     * @type {string}
     * @memberof TeamDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TeamInsert
 */
export interface TeamInsert {
    /**
     * 
     * @type {string}
     * @memberof TeamInsert
     */
    'event': TeamInsertEventEnum;
    /**
     * 
     * @type {Array<TeamInsertData>}
     * @memberof TeamInsert
     */
    'data': Array<TeamInsertData>;
}

export const TeamInsertEventEnum = {
    TeamInsert: 'team-insert'
} as const;

export type TeamInsertEventEnum = typeof TeamInsertEventEnum[keyof typeof TeamInsertEventEnum];

/**
 * 
 * @export
 * @interface TeamInsertData
 */
export interface TeamInsertData {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {TeamInsertDataCreator}
     * @memberof TeamInsertData
     */
    'creator'?: TeamInsertDataCreator;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamInsertData
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamInsertData
     */
    'scopes': Array<TeamInsertDataScopesEnum>;
    /**
     * 
     * @type {TeamInsertDataMetadata}
     * @memberof TeamInsertData
     */
    'metadata': TeamInsertDataMetadata;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertData
     */
    'partnerAdmin'?: string | null;
    /**
     * 
     * @type {Array<TeamInsertDataOnboardingStepsDoneInner>}
     * @memberof TeamInsertData
     */
    'onboardingStepsDone'?: Array<TeamInsertDataOnboardingStepsDoneInner>;
    /**
     * 
     * @type {number}
     * @memberof TeamInsertData
     */
    'onboardingScore'?: number;
}

export const TeamInsertDataScopesEnum = {
    WaState: 'WA_STATE',
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountRead: 'ACCOUNT_READ',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountPatch: 'ACCOUNT_PATCH',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeamlinkRead: 'TEAMLINK_READ',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    TeamNotify: 'TEAM_NOTIFY',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    Notes: 'NOTES',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT'
} as const;

export type TeamInsertDataScopesEnum = typeof TeamInsertDataScopesEnum[keyof typeof TeamInsertDataScopesEnum];

/**
 * 
 * @export
 * @interface TeamInsertDataCreator
 */
export interface TeamInsertDataCreator {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TeamInsertDataCreator
     */
    'phoneNumber': number | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'createdByMethod'?: TeamInsertDataCreatorCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof TeamInsertDataCreator
     * @deprecated
     */
    'notify': UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof TeamInsertDataCreator
     */
    'notificationPreferences': UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof TeamInsertDataCreator
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataCreator
     */
    'partnership'?: string | null;
}

export const TeamInsertDataCreatorCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase'
} as const;

export type TeamInsertDataCreatorCreatedByMethodEnum = typeof TeamInsertDataCreatorCreatedByMethodEnum[keyof typeof TeamInsertDataCreatorCreatedByMethodEnum];

/**
 * 
 * @export
 * @interface TeamInsertDataMetadata
 */
export interface TeamInsertDataMetadata {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyEmailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'companyWebsite'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataMetadata
     */
    'industry'?: string;
}
/**
 * 
 * @export
 * @interface TeamInsertDataOnboardingStepsDoneInner
 */
export interface TeamInsertDataOnboardingStepsDoneInner {
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'id': TeamInsertDataOnboardingStepsDoneInnerIdEnum;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'doneAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeamInsertDataOnboardingStepsDoneInner
     */
    'doneBy': string;
}

export const TeamInsertDataOnboardingStepsDoneInnerIdEnum = {
    ConnectedWa: 'connectedWa',
    SentMessage: 'sentMessage',
    UsedMobileVersion: 'usedMobileVersion',
    InvitedTeamMember: 'invitedTeamMember',
    CreatedNote: 'createdNote',
    CreatedTag: 'createdTag',
    CreatedMessageFlow: 'createdMessageFlow',
    SentMessageFlowByShortcut: 'sentMessageFlowByShortcut',
    AssignedChatToTeamMember: 'assignedChatToTeamMember',
    ScheduledAMessage: 'scheduledAMessage',
    CreatedMessageFlowWithButtons: 'createdMessageFlowWithButtons',
    SentMessageFlowWithButtons: 'sentMessageFlowWithButtons',
    AutoTagOrAssignWithMessageFlow: 'autoTagOrAssignWithMessageFlow',
    CreatedFirstBroadcast: 'createdFirstBroadcast',
    ScheduledFirstBroadcast: 'scheduledFirstBroadcast',
    ToggleOfflineBotOn: 'toggleOfflineBotOn',
    CreatedFirstKeywordBot: 'createdFirstKeywordBot',
    ConnectFirstIntegration: 'connectFirstIntegration',
    ImportedContacts: 'importedContacts',
    AdddedACustomFieldToContact: 'adddedACustomFieldToContact'
} as const;

export type TeamInsertDataOnboardingStepsDoneInnerIdEnum = typeof TeamInsertDataOnboardingStepsDoneInnerIdEnum[keyof typeof TeamInsertDataOnboardingStepsDoneInnerIdEnum];

/**
 * 
 * @export
 * @interface TeamUpdate
 */
export interface TeamUpdate {
    /**
     * 
     * @type {string}
     * @memberof TeamUpdate
     */
    'event': TeamUpdateEventEnum;
    /**
     * 
     * @type {Array<TeamUpdateData>}
     * @memberof TeamUpdate
     */
    'data': Array<TeamUpdateData>;
}

export const TeamUpdateEventEnum = {
    TeamUpdate: 'team-update'
} as const;

export type TeamUpdateEventEnum = typeof TeamUpdateEventEnum[keyof typeof TeamUpdateEventEnum];

/**
 * 
 * @export
 * @interface TeamUpdateData
 */
export interface TeamUpdateData {
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'createdBy'?: string;
    /**
     * 
     * @type {TeamInsertDataCreator}
     * @memberof TeamUpdateData
     */
    'creator'?: TeamInsertDataCreator;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeamUpdateData
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamUpdateData
     */
    'scopes'?: Array<TeamUpdateDataScopesEnum>;
    /**
     * 
     * @type {TeamInsertDataMetadata}
     * @memberof TeamUpdateData
     */
    'metadata'?: TeamInsertDataMetadata;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateData
     */
    'partnerAdmin'?: string | null;
    /**
     * 
     * @type {Array<TeamInsertDataOnboardingStepsDoneInner>}
     * @memberof TeamUpdateData
     */
    'onboardingStepsDone'?: Array<TeamInsertDataOnboardingStepsDoneInner>;
    /**
     * 
     * @type {number}
     * @memberof TeamUpdateData
     */
    'onboardingScore'?: number;
}

export const TeamUpdateDataScopesEnum = {
    WaState: 'WA_STATE',
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountRead: 'ACCOUNT_READ',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountPatch: 'ACCOUNT_PATCH',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeamlinkRead: 'TEAMLINK_READ',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    TeamNotify: 'TEAM_NOTIFY',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    Notes: 'NOTES',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT'
} as const;

export type TeamUpdateDataScopesEnum = typeof TeamUpdateDataScopesEnum[keyof typeof TeamUpdateDataScopesEnum];

/**
 * 
 * @export
 * @interface TeammemberDelete
 */
export interface TeammemberDelete {
    /**
     * 
     * @type {string}
     * @memberof TeammemberDelete
     */
    'event': TeammemberDeleteEventEnum;
    /**
     * 
     * @type {Array<TeammemberDeleteData>}
     * @memberof TeammemberDelete
     */
    'data': Array<TeammemberDeleteData>;
}

export const TeammemberDeleteEventEnum = {
    TeammemberDelete: 'teammember-delete'
} as const;

export type TeammemberDeleteEventEnum = typeof TeammemberDeleteEventEnum[keyof typeof TeammemberDeleteEventEnum];

/**
 * 
 * @export
 * @interface TeammemberDeleteData
 */
export interface TeammemberDeleteData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberDeleteData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberDeleteData
     */
    'teamId': string;
}
/**
 * 
 * @export
 * @interface TeammemberInsert
 */
export interface TeammemberInsert {
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsert
     */
    'event': TeammemberInsertEventEnum;
    /**
     * 
     * @type {Array<TeammemberInsertData>}
     * @memberof TeammemberInsert
     */
    'data': Array<TeammemberInsertData>;
}

export const TeammemberInsertEventEnum = {
    TeammemberInsert: 'teammember-insert'
} as const;

export type TeammemberInsertEventEnum = typeof TeammemberInsertEventEnum[keyof typeof TeammemberInsertEventEnum];

/**
 * 
 * @export
 * @interface TeammemberInsertData
 */
export interface TeammemberInsertData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'addedAt': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberInsertData
     */
    'addedBy'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeammemberInsertData
     */
    'scopes': Array<TeammemberInsertDataScopesEnum>;
}

export const TeammemberInsertDataScopesEnum = {
    WaState: 'WA_STATE',
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountRead: 'ACCOUNT_READ',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountPatch: 'ACCOUNT_PATCH',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeamlinkRead: 'TEAMLINK_READ',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    TeamNotify: 'TEAM_NOTIFY',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    Notes: 'NOTES',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT'
} as const;

export type TeammemberInsertDataScopesEnum = typeof TeammemberInsertDataScopesEnum[keyof typeof TeammemberInsertDataScopesEnum];

/**
 * 
 * @export
 * @interface TeammemberUpdate
 */
export interface TeammemberUpdate {
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdate
     */
    'event': TeammemberUpdateEventEnum;
    /**
     * 
     * @type {Array<TeammemberUpdateData>}
     * @memberof TeammemberUpdate
     */
    'data': Array<TeammemberUpdateData>;
}

export const TeammemberUpdateEventEnum = {
    TeammemberUpdate: 'teammember-update'
} as const;

export type TeammemberUpdateEventEnum = typeof TeammemberUpdateEventEnum[keyof typeof TeammemberUpdateEventEnum];

/**
 * 
 * @export
 * @interface TeammemberUpdateData
 */
export interface TeammemberUpdateData {
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'teamId': string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'addedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeammemberUpdateData
     */
    'addedBy'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeammemberUpdateData
     */
    'scopes'?: Array<TeammemberUpdateDataScopesEnum>;
}

export const TeammemberUpdateDataScopesEnum = {
    WaState: 'WA_STATE',
    ContactsReadAssigned: 'CONTACTS_READ_ASSIGNED',
    ContactsReadAll: 'CONTACTS_READ_ALL',
    ContactsExportButton: 'CONTACTS_EXPORT_BUTTON',
    ContactsCreate: 'CONTACTS_CREATE',
    ContactsDelete: 'CONTACTS_DELETE',
    ContactsUpdate: 'CONTACTS_UPDATE',
    CampaignsRead: 'CAMPAIGNS_READ',
    CampaignsCreate: 'CAMPAIGNS_CREATE',
    CampaignsDelete: 'CAMPAIGNS_DELETE',
    CampaignsUpdate: 'CAMPAIGNS_UPDATE',
    KeywordRead: 'KEYWORD_READ',
    KeywordCreate: 'KEYWORD_CREATE',
    KeywordDelete: 'KEYWORD_DELETE',
    KeywordUpdate: 'KEYWORD_UPDATE',
    TemplatesRead: 'TEMPLATES_READ',
    TemplatesCreate: 'TEMPLATES_CREATE',
    TemplatesDelete: 'TEMPLATES_DELETE',
    TemplatesUpdate: 'TEMPLATES_UPDATE',
    TagsRead: 'TAGS_READ',
    TagsCreate: 'TAGS_CREATE',
    TagsDelete: 'TAGS_DELETE',
    TokensRead: 'TOKENS_READ',
    TokensDelete: 'TOKENS_DELETE',
    UsersPatch: 'USERS_PATCH',
    TeamUpdate: 'TEAM_UPDATE',
    AccountCreate: 'ACCOUNT_CREATE',
    AccountRead: 'ACCOUNT_READ',
    AccountDelete: 'ACCOUNT_DELETE',
    AccountPatch: 'ACCOUNT_PATCH',
    TeamlinkCreate: 'TEAMLINK_CREATE',
    TeamlinkRead: 'TEAMLINK_READ',
    TeammembersUpdate: 'TEAMMEMBERS_UPDATE',
    TeammembersRead: 'TEAMMEMBERS_READ',
    TeamNotify: 'TEAM_NOTIFY',
    ChatsAccessAll: 'CHATS_ACCESS_ALL',
    ChatsAccessAssigned: 'CHATS_ACCESS_ASSIGNED',
    ChatsDelete: 'CHATS_DELETE',
    MessagesSendToAssigned: 'MESSAGES_SEND_TO_ASSIGNED',
    MessagesSendToAll: 'MESSAGES_SEND_TO_ALL',
    MessagesDelete: 'MESSAGES_DELETE',
    GroupsCreate: 'GROUPS_CREATE',
    GroupsUpdate: 'GROUPS_UPDATE',
    Notes: 'NOTES',
    NotificationRead: 'NOTIFICATION_READ',
    NotificationCreate: 'NOTIFICATION_CREATE',
    NotificationUpdate: 'NOTIFICATION_UPDATE',
    NotificationDelete: 'NOTIFICATION_DELETE',
    IntegrationsUpdate: 'INTEGRATIONS_UPDATE',
    AdminPanelAccess: 'ADMIN_PANEL_ACCESS',
    PaymentsRead: 'PAYMENTS_READ',
    PaymentsUpdate: 'PAYMENTS_UPDATE',
    WaLiveEvents: 'WA_LIVE_EVENTS',
    ChatdaddyHook: 'CHATDADDY_HOOK',
    PartnerAdminPanelAccess: 'PARTNER_ADMIN_PANEL_ACCESS',
    ProductsGet: 'PRODUCTS_GET',
    ProductsCreate: 'PRODUCTS_CREATE',
    ProductsUpdate: 'PRODUCTS_UPDATE',
    ProductsDelete: 'PRODUCTS_DELETE',
    PaymentIntegrationRead: 'PAYMENT_INTEGRATION_READ',
    PaymentIntegrationWrite: 'PAYMENT_INTEGRATION_WRITE',
    PaymentRecordsRead: 'PAYMENT_RECORDS_READ',
    PaymentRecordsWrite: 'PAYMENT_RECORDS_WRITE',
    MetricsGet: 'METRICS_GET',
    AccountsReadAssigned: 'ACCOUNTS_READ_ASSIGNED',
    AutocompleteGet: 'AUTOCOMPLETE_GET',
    MessagesSearch: 'MESSAGES_SEARCH',
    WidgetEdit: 'WIDGET_EDIT'
} as const;

export type TeammemberUpdateDataScopesEnum = typeof TeammemberUpdateDataScopesEnum[keyof typeof TeammemberUpdateDataScopesEnum];

/**
 * 
 * @export
 * @interface TrackingDelete
 */
export interface TrackingDelete {
    /**
     * 
     * @type {string}
     * @memberof TrackingDelete
     */
    'event': TrackingDeleteEventEnum;
    /**
     * 
     * @type {Array<TrackingDeleteData>}
     * @memberof TrackingDelete
     */
    'data': Array<TrackingDeleteData>;
}

export const TrackingDeleteEventEnum = {
    TrackingDelete: 'tracking-delete'
} as const;

export type TrackingDeleteEventEnum = typeof TrackingDeleteEventEnum[keyof typeof TrackingDeleteEventEnum];

/**
 * 
 * @export
 * @interface TrackingDeleteData
 */
export interface TrackingDeleteData {
    /**
     * 
     * @type {number}
     * @memberof TrackingDeleteData
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface TrackingInsert
 */
export interface TrackingInsert {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsert
     */
    'event': TrackingInsertEventEnum;
    /**
     * 
     * @type {Array<TrackingInsertData>}
     * @memberof TrackingInsert
     */
    'data': Array<TrackingInsertData>;
}

export const TrackingInsertEventEnum = {
    TrackingInsert: 'tracking-insert'
} as const;

export type TrackingInsertEventEnum = typeof TrackingInsertEventEnum[keyof typeof TrackingInsertEventEnum];

/**
 * 
 * @export
 * @interface TrackingInsertData
 */
export interface TrackingInsertData {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'secretId': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'serviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'teamId': string;
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'defaultCountryCode'?: number;
    /**
     * 
     * @type {Array<TrackingInsertDataEventsInner>}
     * @memberof TrackingInsertData
     */
    'events': Array<TrackingInsertDataEventsInner>;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'lastActivity': string;
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertData
     */
    'triggered': number;
    /**
     * 
     * @type {boolean}
     * @memberof TrackingInsertData
     */
    'isActive': boolean;
    /**
     * 
     * @type {TrackingInsertDataOverridePhoneNumber}
     * @memberof TrackingInsertData
     */
    'overridePhoneNumber'?: TrackingInsertDataOverridePhoneNumber;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertData
     */
    'accountId': string | null;
    /**
     * 
     * @type {TrackingInsertDataError}
     * @memberof TrackingInsertData
     */
    'error': TrackingInsertDataError | null;
    /**
     * 
     * @type {TrackingInsertDataAutoPayment}
     * @memberof TrackingInsertData
     */
    'autoPayment'?: TrackingInsertDataAutoPayment | null;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataAutoPayment
 */
export interface TrackingInsertDataAutoPayment {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataAutoPayment
     */
    'paymentIntegrationId': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataError
 */
export interface TrackingInsertDataError {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataError
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInner
 */
export interface TrackingInsertDataEventsInner {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataEventsInner
     */
    'id'?: number;
    /**
     * Passed in the body to mark for deletion
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInner
     */
    'delete'?: boolean;
    /**
     * the message template to send when this trigger is activated
     * @type {string}
     * @memberof TrackingInsertDataEventsInner
     */
    'templateId'?: string;
    /**
     * Whether the condition is enabled. If false, the trigger will be ignored whenever a data point is ingested
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInner
     */
    'enabled'?: boolean;
    /**
     * Maximum notifications to be sent per order on this trigger. Default null -- unlimited
     * @type {number}
     * @memberof TrackingInsertDataEventsInner
     */
    'limit'?: number | null;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1Delay}
     * @memberof TrackingInsertDataEventsInner
     */
    'delay'?: TrackingInsertDataEventsInnerAllOf1Delay;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ScheduleOptions}
     * @memberof TrackingInsertDataEventsInner
     */
    'scheduleOptions'?: TrackingInsertDataEventsInnerAllOf1ScheduleOptions | null;
    /**
     * an array of usersIds to notify users when an event is created
     * @type {Array<string>}
     * @memberof TrackingInsertDataEventsInner
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; }}
     * @memberof TrackingInsertDataEventsInner
     */
    'conditions'?: { [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; };
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf
 */
export interface TrackingInsertDataEventsInnerAllOf {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf
     */
    'id'?: number;
    /**
     * Passed in the body to mark for deletion
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInnerAllOf
     */
    'delete'?: boolean;
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1
 */
export interface TrackingInsertDataEventsInnerAllOf1 {
    /**
     * the message template to send when this trigger is activated
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'templateId'?: string;
    /**
     * Whether the condition is enabled. If false, the trigger will be ignored whenever a data point is ingested
     * @type {boolean}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'enabled'?: boolean;
    /**
     * Maximum notifications to be sent per order on this trigger. Default null -- unlimited
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'limit'?: number | null;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1Delay}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'delay'?: TrackingInsertDataEventsInnerAllOf1Delay;
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ScheduleOptions}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'scheduleOptions'?: TrackingInsertDataEventsInnerAllOf1ScheduleOptions | null;
    /**
     * an array of usersIds to notify users when an event is created
     * @type {Array<string>}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'notifyUsers'?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; }}
     * @memberof TrackingInsertDataEventsInnerAllOf1
     */
    'conditions'?: { [key: string]: TrackingInsertDataEventsInnerAllOf1ConditionsValue; };
}
/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1ConditionsValue
 */
export interface TrackingInsertDataEventsInnerAllOf1ConditionsValue {
    /**
     * 
     * @type {TrackingInsertDataEventsInnerAllOf1ConditionsValueValues}
     * @memberof TrackingInsertDataEventsInnerAllOf1ConditionsValue
     */
    'values': TrackingInsertDataEventsInnerAllOf1ConditionsValueValues;
    /**
     * the test for the condition. Default is `include`
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1ConditionsValue
     */
    'test'?: TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum;
}

export const TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum = {
    Include: 'include',
    Exclude: 'exclude',
    GreaterThan: 'greater-than',
    LessThan: 'less-than'
} as const;

export type TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum = typeof TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum[keyof typeof TrackingInsertDataEventsInnerAllOf1ConditionsValueTestEnum];

/**
 * @type TrackingInsertDataEventsInnerAllOf1ConditionsValueValues
 * @export
 */
export type TrackingInsertDataEventsInnerAllOf1ConditionsValueValues = Array<number> | Array<string>;

/**
 * the optional delay to attach to this service
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1Delay
 */
export interface TrackingInsertDataEventsInnerAllOf1Delay {
    /**
     * the delay in sending the message
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1Delay
     */
    'seconds'?: number;
    /**
     * The type of delay \"stale\" means that the message is sent out with the aforementioned delay (delayS) if the order is not updated. If the order is updated before the delay is over, then the message is cancelled \"simple\" means that the message is sent out regardless of the order update. 
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1Delay
     */
    'type'?: TrackingInsertDataEventsInnerAllOf1DelayTypeEnum;
}

export const TrackingInsertDataEventsInnerAllOf1DelayTypeEnum = {
    Simple: 'simple',
    Stale: 'stale'
} as const;

export type TrackingInsertDataEventsInnerAllOf1DelayTypeEnum = typeof TrackingInsertDataEventsInnerAllOf1DelayTypeEnum[keyof typeof TrackingInsertDataEventsInnerAllOf1DelayTypeEnum];

/**
 * 
 * @export
 * @interface TrackingInsertDataEventsInnerAllOf1ScheduleOptions
 */
export interface TrackingInsertDataEventsInnerAllOf1ScheduleOptions {
    /**
     * the order parameter to use for the schedule
     * @type {string}
     * @memberof TrackingInsertDataEventsInnerAllOf1ScheduleOptions
     */
    'parameter'?: string;
    /**
     * the time to schedule message before or after the parameter in seconds. Negative value means before the parameter date
     * @type {number}
     * @memberof TrackingInsertDataEventsInnerAllOf1ScheduleOptions
     */
    'delaySeconds'?: number;
}
/**
 * @type TrackingInsertDataOverridePhoneNumber
 * @export
 */
export type TrackingInsertDataOverridePhoneNumber = TrackingInsertDataOverridePhoneNumberOneOf | TrackingInsertDataOverridePhoneNumberOneOf1;

/**
 * Override with exact phone number
 * @export
 * @interface TrackingInsertDataOverridePhoneNumberOneOf
 */
export interface TrackingInsertDataOverridePhoneNumberOneOf {
    /**
     * 
     * @type {number}
     * @memberof TrackingInsertDataOverridePhoneNumberOneOf
     */
    'exact': number;
}
/**
 * Override with a field from the data
 * @export
 * @interface TrackingInsertDataOverridePhoneNumberOneOf1
 */
export interface TrackingInsertDataOverridePhoneNumberOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof TrackingInsertDataOverridePhoneNumberOneOf1
     */
    'field': string;
}
/**
 * 
 * @export
 * @interface TrackingUpdate
 */
export interface TrackingUpdate {
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdate
     */
    'event': TrackingUpdateEventEnum;
    /**
     * 
     * @type {Array<TrackingUpdateData>}
     * @memberof TrackingUpdate
     */
    'data': Array<TrackingUpdateData>;
}

export const TrackingUpdateEventEnum = {
    TrackingUpdate: 'tracking-update'
} as const;

export type TrackingUpdateEventEnum = typeof TrackingUpdateEventEnum[keyof typeof TrackingUpdateEventEnum];

/**
 * 
 * @export
 * @interface TrackingUpdateData
 */
export interface TrackingUpdateData {
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'secretId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'serviceId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'teamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'defaultCountryCode'?: number;
    /**
     * 
     * @type {Array<TrackingInsertDataEventsInner>}
     * @memberof TrackingUpdateData
     */
    'events'?: Array<TrackingInsertDataEventsInner>;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'lastActivity'?: string;
    /**
     * 
     * @type {number}
     * @memberof TrackingUpdateData
     */
    'triggered'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TrackingUpdateData
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {TrackingInsertDataOverridePhoneNumber}
     * @memberof TrackingUpdateData
     */
    'overridePhoneNumber'?: TrackingInsertDataOverridePhoneNumber;
    /**
     * 
     * @type {string}
     * @memberof TrackingUpdateData
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {TrackingInsertDataError}
     * @memberof TrackingUpdateData
     */
    'error'?: TrackingInsertDataError | null;
    /**
     * 
     * @type {TrackingInsertDataAutoPayment}
     * @memberof TrackingUpdateData
     */
    'autoPayment'?: TrackingInsertDataAutoPayment | null;
}
/**
 * 
 * @export
 * @interface UnreadChatsNotification
 */
export interface UnreadChatsNotification {
    /**
     * 
     * @type {string}
     * @memberof UnreadChatsNotification
     */
    'event': UnreadChatsNotificationEventEnum;
    /**
     * 
     * @type {Array<UnreadChatsNotificationData>}
     * @memberof UnreadChatsNotification
     */
    'data': Array<UnreadChatsNotificationData>;
}

export const UnreadChatsNotificationEventEnum = {
    UnreadChatsNotification: 'unread-chats-notification'
} as const;

export type UnreadChatsNotificationEventEnum = typeof UnreadChatsNotificationEventEnum[keyof typeof UnreadChatsNotificationEventEnum];

/**
 * 
 * @export
 * @interface UnreadChatsNotificationData
 */
export interface UnreadChatsNotificationData {
    /**
     * 
     * @type {string}
     * @memberof UnreadChatsNotificationData
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof UnreadChatsNotificationData
     */
    'unreadChatsCount'?: number;
}
/**
 * 
 * @export
 * @interface UpdateEventSubscription
 */
export interface UpdateEventSubscription {
    /**
     * whether the subscription is enabled
     * @type {boolean}
     * @memberof UpdateEventSubscription
     */
    'enabled'?: boolean;
    /**
     * the events to listen for
     * @type {Array<EventName>}
     * @memberof UpdateEventSubscription
     */
    'events'?: Array<EventName>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateEventSubscription
     */
    'accounts'?: Array<string>;
    /**
     * Optionally specify ajv schema object, if validation of data fails -- the subscription will not fire
     * @type {{ [key: string]: any; }}
     * @memberof UpdateEventSubscription
     */
    'schema'?: { [key: string]: any; } | null;
    /**
     * Web hook url to fire to
     * @type {string}
     * @memberof UpdateEventSubscription
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface UserDelete
 */
export interface UserDelete {
    /**
     * 
     * @type {string}
     * @memberof UserDelete
     */
    'event': UserDeleteEventEnum;
    /**
     * 
     * @type {Array<UserDeleteData>}
     * @memberof UserDelete
     */
    'data': Array<UserDeleteData>;
}

export const UserDeleteEventEnum = {
    UserDelete: 'user-delete'
} as const;

export type UserDeleteEventEnum = typeof UserDeleteEventEnum[keyof typeof UserDeleteEventEnum];

/**
 * 
 * @export
 * @interface UserDeleteData
 */
export interface UserDeleteData {
    /**
     * 
     * @type {string}
     * @memberof UserDeleteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UserInsert
 */
export interface UserInsert {
    /**
     * 
     * @type {string}
     * @memberof UserInsert
     */
    'event': UserInsertEventEnum;
    /**
     * 
     * @type {Array<UserInsertData>}
     * @memberof UserInsert
     */
    'data': Array<UserInsertData>;
}

export const UserInsertEventEnum = {
    UserInsert: 'user-insert'
} as const;

export type UserInsertEventEnum = typeof UserInsertEventEnum[keyof typeof UserInsertEventEnum];

/**
 * 
 * @export
 * @interface UserInsertData
 */
export interface UserInsertData {
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserInsertData
     */
    'phoneNumber': number | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'createdByMethod'?: UserInsertDataCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof UserInsertData
     * @deprecated
     */
    'notify': UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof UserInsertData
     */
    'notificationPreferences': UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof UserInsertData
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof UserInsertData
     */
    'partnership'?: string | null;
}

export const UserInsertDataCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase'
} as const;

export type UserInsertDataCreatedByMethodEnum = typeof UserInsertDataCreatedByMethodEnum[keyof typeof UserInsertDataCreatedByMethodEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferences
 */
export interface UserInsertDataNotificationPreferences {
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesAccountDisconnected}
     * @memberof UserInsertDataNotificationPreferences
     */
    'accountDisconnected'?: UserInsertDataNotificationPreferencesAccountDisconnected;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'contactAssignedToMe'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessage}
     * @memberof UserInsertDataNotificationPreferences
     */
    'newMessage'?: UserInsertDataNotificationPreferencesNewMessage;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'teamMemberAdded'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'trackingAdded'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'trackingErrored'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesAccountDisconnected}
     * @memberof UserInsertDataNotificationPreferences
     */
    'botExternalTemplateStatusUpdated'?: UserInsertDataNotificationPreferencesAccountDisconnected;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'actionExecute'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'noteMentionsMe'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesContactAssignedToMe}
     * @memberof UserInsertDataNotificationPreferences
     */
    'payments'?: UserInsertDataNotificationPreferencesContactAssignedToMe;
}
/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesAccountDisconnected
 */
export interface UserInsertDataNotificationPreferencesAccountDisconnected {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnected
     */
    'destinations': Array<UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum>;
    /**
     * 
     * @type {Array<UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner>}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnected
     */
    'accounts'?: Array<UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner>;
}

export const UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum = {
    Push: 'push',
    Email: 'email',
    Whatsapp: 'whatsapp'
} as const;

export type UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum = typeof UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesAccountDisconnectedDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner
 */
export interface UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataNotificationPreferencesAccountDisconnectedAccountsInner
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesContactAssignedToMe
 */
export interface UserInsertDataNotificationPreferencesContactAssignedToMe {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesContactAssignedToMe
     */
    'destinations': Array<UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum>;
}

export const UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum = {
    Push: 'push',
    Email: 'email',
    Whatsapp: 'whatsapp'
} as const;

export type UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum = typeof UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesContactAssignedToMeDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesNewMessage
 */
export interface UserInsertDataNotificationPreferencesNewMessage {
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'destinations': Array<UserInsertDataNotificationPreferencesNewMessageDestinationsEnum>;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessageDefaultType}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'defaultType'?: UserInsertDataNotificationPreferencesNewMessageDefaultType;
    /**
     * 
     * @type {Array<UserInsertDataNotificationPreferencesNewMessageAccountsInner>}
     * @memberof UserInsertDataNotificationPreferencesNewMessage
     */
    'accounts'?: Array<UserInsertDataNotificationPreferencesNewMessageAccountsInner>;
}

export const UserInsertDataNotificationPreferencesNewMessageDestinationsEnum = {
    Push: 'push'
} as const;

export type UserInsertDataNotificationPreferencesNewMessageDestinationsEnum = typeof UserInsertDataNotificationPreferencesNewMessageDestinationsEnum[keyof typeof UserInsertDataNotificationPreferencesNewMessageDestinationsEnum];

/**
 * 
 * @export
 * @interface UserInsertDataNotificationPreferencesNewMessageAccountsInner
 */
export interface UserInsertDataNotificationPreferencesNewMessageAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataNotificationPreferencesNewMessageAccountsInner
     */
    'id': string;
    /**
     * 
     * @type {UserInsertDataNotificationPreferencesNewMessageDefaultType}
     * @memberof UserInsertDataNotificationPreferencesNewMessageAccountsInner
     */
    'type': UserInsertDataNotificationPreferencesNewMessageDefaultType;
}
/**
 * @type UserInsertDataNotificationPreferencesNewMessageDefaultType
 * @export
 */
export type UserInsertDataNotificationPreferencesNewMessageDefaultType = Array<string> | string;

/**
 * 
 * @export
 * @interface UserInsertDataNotify
 */
export interface UserInsertDataNotify {
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'whatsapp'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'email'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInsertDataNotify
     */
    'desktop'?: boolean;
}
/**
 * 
 * @export
 * @interface UserInsertDataWebPushSubscriptionsInner
 */
export interface UserInsertDataWebPushSubscriptionsInner {
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'endpoint': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'authKey': string;
    /**
     * 
     * @type {string}
     * @memberof UserInsertDataWebPushSubscriptionsInner
     */
    'p256dhKey': string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'event': UserUpdateEventEnum;
    /**
     * 
     * @type {Array<UserUpdateData>}
     * @memberof UserUpdate
     */
    'data': Array<UserUpdateData>;
}

export const UserUpdateEventEnum = {
    UserUpdate: 'user-update'
} as const;

export type UserUpdateEventEnum = typeof UserUpdateEventEnum[keyof typeof UserUpdateEventEnum];

/**
 * 
 * @export
 * @interface UserUpdateData
 */
export interface UserUpdateData {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'disabledAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'lastUsedTeamId'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserUpdateData
     */
    'phoneNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'emailAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'createdByMethod'?: UserUpdateDataCreatedByMethodEnum;
    /**
     * 
     * @type {UserInsertDataNotify}
     * @memberof UserUpdateData
     * @deprecated
     */
    'notify'?: UserInsertDataNotify;
    /**
     * 
     * @type {UserInsertDataNotificationPreferences}
     * @memberof UserUpdateData
     */
    'notificationPreferences'?: UserInsertDataNotificationPreferences;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'referralCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'signature'?: string | null;
    /**
     * 
     * @type {Array<UserInsertDataWebPushSubscriptionsInner>}
     * @memberof UserUpdateData
     */
    'webPushSubscriptions'?: Array<UserInsertDataWebPushSubscriptionsInner>;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateData
     */
    'partnership'?: string | null;
}

export const UserUpdateDataCreatedByMethodEnum = {
    AdminPanel: 'admin-panel',
    Otp: 'otp',
    Boutir: 'boutir',
    InstantReg: 'instant-reg',
    Firebase: 'firebase'
} as const;

export type UserUpdateDataCreatedByMethodEnum = typeof UserUpdateDataCreatedByMethodEnum[keyof typeof UserUpdateDataCreatedByMethodEnum];


/**
 * AlarmsApi - axios parameter creator
 * @export
 */
export const AlarmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmPostRequest} [alarmPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmPost: async (alarmPostRequest?: AlarmPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alarm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["ADMIN_PANEL_ACCESS"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alarmPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlarmsApi - functional programming interface
 * @export
 */
export const AlarmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlarmsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmPostRequest} [alarmPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alarmPost(alarmPostRequest?: AlarmPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlarmPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alarmPost(alarmPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AlarmsApi - factory interface
 * @export
 */
export const AlarmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlarmsApiFp(configuration)
    return {
        /**
         * 
         * @summary Send an alarm to the system
         * @param {AlarmsApiAlarmPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alarmPost(requestParameters: AlarmsApiAlarmPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AlarmPost200Response> {
            return localVarFp.alarmPost(requestParameters.alarmPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for alarmPost operation in AlarmsApi.
 * @export
 * @interface AlarmsApiAlarmPostRequest
 */
export interface AlarmsApiAlarmPostRequest {
    /**
     * 
     * @type {AlarmPostRequest}
     * @memberof AlarmsApiAlarmPost
     */
    readonly alarmPostRequest?: AlarmPostRequest
}

/**
 * AlarmsApi - object-oriented interface
 * @export
 * @class AlarmsApi
 * @extends {BaseAPI}
 */
export class AlarmsApi extends BaseAPI {
    /**
     * 
     * @summary Send an alarm to the system
     * @param {AlarmsApiAlarmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlarmsApi
     */
    public alarmPost(requestParameters: AlarmsApiAlarmPostRequest = {}, options?: AxiosRequestConfig) {
        return AlarmsApiFp(this.configuration).alarmPost(requestParameters.alarmPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventSubscriptionApi - axios parameter creator
 * @export
 */
export const EventSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsDelete', 'id', id)
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionType} [type] Filter by subscription type
         * @param {string} [accountId] Filter by subscriptions that are enabled for this account
         * @param {Array<string>} [teamId] Filter by subscriptions that are enabled for this team
         * @param {Array<string>} [userId] Filter by subscriptions that are enabled for the specified users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsGet: async (type?: EventSubscriptionType, accountId?: string, teamId?: Array<string>, userId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (teamId) {
                localVarQueryParameter['teamId'] = teamId;
            }

            if (userId) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsMessagePost: async (id: string, eventWebhookData?: EventWebhookData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsMessagePost', 'id', id)
            const localVarPath = `/subscriptions/{id}/message`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["ADMIN_PANEL_ACCESS"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventWebhookData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {string} id 
         * @param {UpdateEventSubscription} [updateEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPatch: async (id: string, updateEventSubscription?: UpdateEventSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionsPatch', 'id', id)
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventSubscription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {PostEventSubscription} [postEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPost: async (postEventSubscription?: PostEventSubscription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATDADDY_HOOK"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postEventSubscription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventSubscriptionApi - functional programming interface
 * @export
 */
export const EventSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionType} [type] Filter by subscription type
         * @param {string} [accountId] Filter by subscriptions that are enabled for this account
         * @param {Array<string>} [teamId] Filter by subscriptions that are enabled for this team
         * @param {Array<string>} [userId] Filter by subscriptions that are enabled for the specified users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsGet(type?: EventSubscriptionType, accountId?: string, teamId?: Array<string>, userId?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsGet(type, accountId, teamId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {string} id 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsMessagePost(id: string, eventWebhookData?: EventWebhookData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsMessagePost(id, eventWebhookData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {string} id 
         * @param {UpdateEventSubscription} [updateEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsPatch(id: string, updateEventSubscription?: UpdateEventSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsPatch(id, updateEventSubscription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {PostEventSubscription} [postEventSubscription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionsPost(postEventSubscription?: PostEventSubscription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventSubscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionsPost(postEventSubscription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventSubscriptionApi - factory interface
 * @export
 */
export const EventSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventSubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsDelete(requestParameters: EventSubscriptionApiSubscriptionsDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionsDelete200Response> {
            return localVarFp.subscriptionsDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all current webhook & websocket subscriptions
         * @param {EventSubscriptionApiSubscriptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsGet(requestParameters: EventSubscriptionApiSubscriptionsGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SubscriptionsGet200Response> {
            return localVarFp.subscriptionsGet(requestParameters.type, requestParameters.accountId, requestParameters.teamId, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send message to subscription
         * @param {EventSubscriptionApiSubscriptionsMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsMessagePost(requestParameters: EventSubscriptionApiSubscriptionsMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subscriptionsMessagePost(requestParameters.id, requestParameters.eventWebhookData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPatch(requestParameters: EventSubscriptionApiSubscriptionsPatchRequest, options?: AxiosRequestConfig): AxiosPromise<EventSubscription> {
            return localVarFp.subscriptionsPatch(requestParameters.id, requestParameters.updateEventSubscription, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a webhook subscription
         * @param {EventSubscriptionApiSubscriptionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionsPost(requestParameters: EventSubscriptionApiSubscriptionsPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EventSubscription> {
            return localVarFp.subscriptionsPost(requestParameters.postEventSubscription, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for subscriptionsDelete operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsDeleteRequest
 */
export interface EventSubscriptionApiSubscriptionsDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsDelete
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionsGet operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsGetRequest
 */
export interface EventSubscriptionApiSubscriptionsGetRequest {
    /**
     * Filter by subscription type
     * @type {EventSubscriptionType}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly type?: EventSubscriptionType

    /**
     * Filter by subscriptions that are enabled for this account
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly accountId?: string

    /**
     * Filter by subscriptions that are enabled for this team
     * @type {Array<string>}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly teamId?: Array<string>

    /**
     * Filter by subscriptions that are enabled for the specified users
     * @type {Array<string>}
     * @memberof EventSubscriptionApiSubscriptionsGet
     */
    readonly userId?: Array<string>
}

/**
 * Request parameters for subscriptionsMessagePost operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsMessagePostRequest
 */
export interface EventSubscriptionApiSubscriptionsMessagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsMessagePost
     */
    readonly id: string

    /**
     * 
     * @type {EventWebhookData}
     * @memberof EventSubscriptionApiSubscriptionsMessagePost
     */
    readonly eventWebhookData?: EventWebhookData
}

/**
 * Request parameters for subscriptionsPatch operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsPatchRequest
 */
export interface EventSubscriptionApiSubscriptionsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof EventSubscriptionApiSubscriptionsPatch
     */
    readonly id: string

    /**
     * 
     * @type {UpdateEventSubscription}
     * @memberof EventSubscriptionApiSubscriptionsPatch
     */
    readonly updateEventSubscription?: UpdateEventSubscription
}

/**
 * Request parameters for subscriptionsPost operation in EventSubscriptionApi.
 * @export
 * @interface EventSubscriptionApiSubscriptionsPostRequest
 */
export interface EventSubscriptionApiSubscriptionsPostRequest {
    /**
     * 
     * @type {PostEventSubscription}
     * @memberof EventSubscriptionApiSubscriptionsPost
     */
    readonly postEventSubscription?: PostEventSubscription
}

/**
 * EventSubscriptionApi - object-oriented interface
 * @export
 * @class EventSubscriptionApi
 * @extends {BaseAPI}
 */
export class EventSubscriptionApi extends BaseAPI {
    /**
     * 
     * @summary Delete a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsDelete(requestParameters: EventSubscriptionApiSubscriptionsDeleteRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all current webhook & websocket subscriptions
     * @param {EventSubscriptionApiSubscriptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsGet(requestParameters: EventSubscriptionApiSubscriptionsGetRequest = {}, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsGet(requestParameters.type, requestParameters.accountId, requestParameters.teamId, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send message to subscription
     * @param {EventSubscriptionApiSubscriptionsMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsMessagePost(requestParameters: EventSubscriptionApiSubscriptionsMessagePostRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsMessagePost(requestParameters.id, requestParameters.eventWebhookData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsPatch(requestParameters: EventSubscriptionApiSubscriptionsPatchRequest, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsPatch(requestParameters.id, requestParameters.updateEventSubscription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a webhook subscription
     * @param {EventSubscriptionApiSubscriptionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventSubscriptionApi
     */
    public subscriptionsPost(requestParameters: EventSubscriptionApiSubscriptionsPostRequest = {}, options?: AxiosRequestConfig) {
        return EventSubscriptionApiFp(this.configuration).subscriptionsPost(requestParameters.postEventSubscription, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebSocketApi - axios parameter creator
 * @export
 */
export const WebSocketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Note: you need to fetch the WS from wss://live.chatdaddy.tech Not from the base url mentioned in the API doc 
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (accessToken: string, events: Array<EventName>, accounts?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessToken' is not null or undefined
            assertParamExists('rootGet', 'accessToken', accessToken)
            // verify required parameter 'events' is not null or undefined
            assertParamExists('rootGet', 'events', events)
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            if (events) {
                localVarQueryParameter['events'] = events;
            }

            if (accounts) {
                localVarQueryParameter['accounts'] = accounts;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSocketApi - functional programming interface
 * @export
 */
export const WebSocketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSocketApiAxiosParamCreator(configuration)
    return {
        /**
         * Note: you need to fetch the WS from wss://live.chatdaddy.tech Not from the base url mentioned in the API doc 
         * @summary The WebSocket Route
         * @param {string} accessToken the JWT authorization token
         * @param {Array<EventName>} events Events to subscribe to
         * @param {Array<string>} [accounts] Set the IM accounts to receive events from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(accessToken: string, events: Array<EventName>, accounts?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(accessToken, events, accounts, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebSocketApi - factory interface
 * @export
 */
export const WebSocketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSocketApiFp(configuration)
    return {
        /**
         * Note: you need to fetch the WS from wss://live.chatdaddy.tech Not from the base url mentioned in the API doc 
         * @summary The WebSocket Route
         * @param {WebSocketApiRootGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(requestParameters: WebSocketApiRootGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for rootGet operation in WebSocketApi.
 * @export
 * @interface WebSocketApiRootGetRequest
 */
export interface WebSocketApiRootGetRequest {
    /**
     * the JWT authorization token
     * @type {string}
     * @memberof WebSocketApiRootGet
     */
    readonly accessToken: string

    /**
     * Events to subscribe to
     * @type {Array<EventName>}
     * @memberof WebSocketApiRootGet
     */
    readonly events: Array<EventName>

    /**
     * Set the IM accounts to receive events from
     * @type {Array<string>}
     * @memberof WebSocketApiRootGet
     */
    readonly accounts?: Array<string>
}

/**
 * WebSocketApi - object-oriented interface
 * @export
 * @class WebSocketApi
 * @extends {BaseAPI}
 */
export class WebSocketApi extends BaseAPI {
    /**
     * Note: you need to fetch the WS from wss://live.chatdaddy.tech Not from the base url mentioned in the API doc 
     * @summary The WebSocket Route
     * @param {WebSocketApiRootGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSocketApi
     */
    public rootGet(requestParameters: WebSocketApiRootGetRequest, options?: AxiosRequestConfig) {
        return WebSocketApiFp(this.configuration).rootGet(requestParameters.accessToken, requestParameters.events, requestParameters.accounts, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WebhookExampleApi - axios parameter creator
 * @export
 */
export const WebhookExampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookExamplePost: async (eventWebhookData?: EventWebhookData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhook/example`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eventWebhookData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookExampleApi - functional programming interface
 * @export
 */
export const WebhookExampleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookExampleApiAxiosParamCreator(configuration)
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {EventWebhookData} [eventWebhookData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookExamplePost(eventWebhookData?: EventWebhookData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookExamplePost(eventWebhookData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookExampleApi - factory interface
 * @export
 */
export const WebhookExampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookExampleApiFp(configuration)
    return {
        /**
         * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
         * @param {WebhookExampleApiWebhookExamplePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookExamplePost(requestParameters: WebhookExampleApiWebhookExamplePostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webhookExamplePost(requestParameters.eventWebhookData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhookExamplePost operation in WebhookExampleApi.
 * @export
 * @interface WebhookExampleApiWebhookExamplePostRequest
 */
export interface WebhookExampleApiWebhookExamplePostRequest {
    /**
     * 
     * @type {EventWebhookData}
     * @memberof WebhookExampleApiWebhookExamplePost
     */
    readonly eventWebhookData?: EventWebhookData
}

/**
 * WebhookExampleApi - object-oriented interface
 * @export
 * @class WebhookExampleApi
 * @extends {BaseAPI}
 */
export class WebhookExampleApi extends BaseAPI {
    /**
     * Example of what to expect from a ChatDaddy Webhook, this is not a real route. Points to keep in mind: - the request body you\'ll receive in the webhook will   match the request body shown in this route - there will be a chatdaddy token in the headers with no scopes - a POST request will be made to the url - ChatDaddy expects a 200 response to mark a successful delivery 
     * @param {WebhookExampleApiWebhookExamplePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookExampleApi
     */
    public webhookExamplePost(requestParameters: WebhookExampleApiWebhookExamplePostRequest = {}, options?: AxiosRequestConfig) {
        return WebhookExampleApiFp(this.configuration).webhookExamplePost(requestParameters.eventWebhookData, options).then((request) => request(this.axios, this.basePath));
    }
}


