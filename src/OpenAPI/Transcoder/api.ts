const BASE_PATH = "https://api-transcoder.chatdaddy.tech".replace(/\/+$/, "");

/* tslint:disable */
/* eslint-disable */
/**
 * Transcoding Service
 * Transcode media 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @enum {string}
 */

export const TranscodeMethod = {
    Aes256CbcDecrypt: 'aes-256-cbc-decrypt'
} as const;

export type TranscodeMethod = typeof TranscodeMethod[keyof typeof TranscodeMethod];



/**
 * DecryptApi - axios parameter creator
 * @export
 */
export const DecryptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Decrypt a message
         * @param {string} accountId Account ID
         * @param {string} chatId Chat ID
         * @param {string} id Message ID
         * @param {number} index Attachment index
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptMessage: async (accountId: string, chatId: string, id: string, index: number, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('decryptMessage', 'accountId', accountId)
            // verify required parameter 'chatId' is not null or undefined
            assertParamExists('decryptMessage', 'chatId', chatId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('decryptMessage', 'id', id)
            // verify required parameter 'index' is not null or undefined
            assertParamExists('decryptMessage', 'index', index)
            const localVarPath = `/stream-message-attachment/{accountId}/{chatId}/{id}/{index}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", ["CHATS_ACCESS_ALL", "CHATS_ACCESS_ASSIGNED"], configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DecryptApi - functional programming interface
 * @export
 */
export const DecryptApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DecryptApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Decrypt a message
         * @param {string} accountId Account ID
         * @param {string} chatId Chat ID
         * @param {string} id Message ID
         * @param {number} index Attachment index
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decryptMessage(accountId: string, chatId: string, id: string, index: number, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.decryptMessage(accountId, chatId, id, index, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DecryptApi - factory interface
 * @export
 */
export const DecryptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DecryptApiFp(configuration)
    return {
        /**
         * 
         * @summary Decrypt a message
         * @param {string} accountId Account ID
         * @param {string} chatId Chat ID
         * @param {string} id Message ID
         * @param {number} index Attachment index
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptMessage(accountId: string, chatId: string, id: string, index: number, token?: string, options?: any): AxiosPromise<void> {
            return localVarFp.decryptMessage(accountId, chatId, id, index, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for decryptMessage operation in DecryptApi.
 * @export
 * @interface DecryptApiDecryptMessageRequest
 */
export interface DecryptApiDecryptMessageRequest {
    /**
     * Account ID
     * @type {string}
     * @memberof DecryptApiDecryptMessage
     */
    readonly accountId: string

    /**
     * Chat ID
     * @type {string}
     * @memberof DecryptApiDecryptMessage
     */
    readonly chatId: string

    /**
     * Message ID
     * @type {string}
     * @memberof DecryptApiDecryptMessage
     */
    readonly id: string

    /**
     * Attachment index
     * @type {number}
     * @memberof DecryptApiDecryptMessage
     */
    readonly index: number

    /**
     * ChatDaddy auth token, optionally provide in query
     * @type {string}
     * @memberof DecryptApiDecryptMessage
     */
    readonly token?: string
}

/**
 * DecryptApi - object-oriented interface
 * @export
 * @class DecryptApi
 * @extends {BaseAPI}
 */
export class DecryptApi extends BaseAPI {
    /**
     * 
     * @summary Decrypt a message
     * @param {DecryptApiDecryptMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecryptApi
     */
    public decryptMessage(requestParameters: DecryptApiDecryptMessageRequest, options?: AxiosRequestConfig) {
        return DecryptApiFp(this.configuration).decryptMessage(requestParameters.accountId, requestParameters.chatId, requestParameters.id, requestParameters.index, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TranscodeApi - axios parameter creator
 * @export
 */
export const TranscodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Transcode hosted media
         * @param {TranscodeMethod} method What to do with the transcoded media
         * @param {string} url The URL to transcode
         * @param {string} [key] Base64 encoded key for decryption
         * @param {string} [iv] Base64 encoded IV for decryption
         * @param {string} [expectedMimetype] expected mimetype of the media post transcoding
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcode: async (method: TranscodeMethod, url: string, key?: string, iv?: string, expectedMimetype?: string, token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'method' is not null or undefined
            assertParamExists('transcode', 'method', method)
            // verify required parameter 'url' is not null or undefined
            assertParamExists('transcode', 'url', url)
            const localVarPath = `/transcode/{method}`
                .replace(`{${"method"}}`, encodeURIComponent(String(method)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication chatdaddy required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "chatdaddy", [], configuration)

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (iv !== undefined) {
                localVarQueryParameter['iv'] = iv;
            }

            if (expectedMimetype !== undefined) {
                localVarQueryParameter['expectedMimetype'] = expectedMimetype;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranscodeApi - functional programming interface
 * @export
 */
export const TranscodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranscodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Transcode hosted media
         * @param {TranscodeMethod} method What to do with the transcoded media
         * @param {string} url The URL to transcode
         * @param {string} [key] Base64 encoded key for decryption
         * @param {string} [iv] Base64 encoded IV for decryption
         * @param {string} [expectedMimetype] expected mimetype of the media post transcoding
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcode(method: TranscodeMethod, url: string, key?: string, iv?: string, expectedMimetype?: string, token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcode(method, url, key, iv, expectedMimetype, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TranscodeApi - factory interface
 * @export
 */
export const TranscodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranscodeApiFp(configuration)
    return {
        /**
         * 
         * @summary Transcode hosted media
         * @param {TranscodeMethod} method What to do with the transcoded media
         * @param {string} url The URL to transcode
         * @param {string} [key] Base64 encoded key for decryption
         * @param {string} [iv] Base64 encoded IV for decryption
         * @param {string} [expectedMimetype] expected mimetype of the media post transcoding
         * @param {string} [token] ChatDaddy auth token, optionally provide in query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcode(method: TranscodeMethod, url: string, key?: string, iv?: string, expectedMimetype?: string, token?: string, options?: any): AxiosPromise<void> {
            return localVarFp.transcode(method, url, key, iv, expectedMimetype, token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for transcode operation in TranscodeApi.
 * @export
 * @interface TranscodeApiTranscodeRequest
 */
export interface TranscodeApiTranscodeRequest {
    /**
     * What to do with the transcoded media
     * @type {TranscodeMethod}
     * @memberof TranscodeApiTranscode
     */
    readonly method: TranscodeMethod

    /**
     * The URL to transcode
     * @type {string}
     * @memberof TranscodeApiTranscode
     */
    readonly url: string

    /**
     * Base64 encoded key for decryption
     * @type {string}
     * @memberof TranscodeApiTranscode
     */
    readonly key?: string

    /**
     * Base64 encoded IV for decryption
     * @type {string}
     * @memberof TranscodeApiTranscode
     */
    readonly iv?: string

    /**
     * expected mimetype of the media post transcoding
     * @type {string}
     * @memberof TranscodeApiTranscode
     */
    readonly expectedMimetype?: string

    /**
     * ChatDaddy auth token, optionally provide in query
     * @type {string}
     * @memberof TranscodeApiTranscode
     */
    readonly token?: string
}

/**
 * TranscodeApi - object-oriented interface
 * @export
 * @class TranscodeApi
 * @extends {BaseAPI}
 */
export class TranscodeApi extends BaseAPI {
    /**
     * 
     * @summary Transcode hosted media
     * @param {TranscodeApiTranscodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranscodeApi
     */
    public transcode(requestParameters: TranscodeApiTranscodeRequest, options?: AxiosRequestConfig) {
        return TranscodeApiFp(this.configuration).transcode(requestParameters.method, requestParameters.url, requestParameters.key, requestParameters.iv, requestParameters.expectedMimetype, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}


